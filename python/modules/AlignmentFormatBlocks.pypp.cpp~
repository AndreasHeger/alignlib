// This file has been generated by Py++.

#include "boost/python.hpp"
#include "includes.h"
#include "iostream"
#include "cstdio"
#include "AlignmentFormatBlocks.pypp.hpp"

namespace bp = boost::python;

struct AlignmentFormatBlocks_wrapper : alignlib::AlignmentFormatBlocks, bp::wrapper< alignlib::AlignmentFormatBlocks > {

    AlignmentFormatBlocks_wrapper( )
    : alignlib::AlignmentFormatBlocks( )
      , bp::wrapper< alignlib::AlignmentFormatBlocks >(){
        // null constructor
    
    }

    AlignmentFormatBlocks_wrapper(::alignlib::HAlignment const & src )
    : alignlib::AlignmentFormatBlocks( src )
      , bp::wrapper< alignlib::AlignmentFormatBlocks >(){
        // constructor
    
    }

    AlignmentFormatBlocks_wrapper(::std::istream & src )
    : alignlib::AlignmentFormatBlocks( boost::ref(src) )
      , bp::wrapper< alignlib::AlignmentFormatBlocks >(){
        // constructor
    
    }

    AlignmentFormatBlocks_wrapper(::std::string const & src )
    : alignlib::AlignmentFormatBlocks( src )
      , bp::wrapper< alignlib::AlignmentFormatBlocks >(){
        // constructor
    
    }

    AlignmentFormatBlocks_wrapper(::alignlib::AlignmentFormatBlocks const & arg0 )
    : alignlib::AlignmentFormatBlocks( boost::ref(arg0) )
      , bp::wrapper< alignlib::AlignmentFormatBlocks >(){
        // copy constructor
    
    }

    virtual ::alignlib::Position applyOffset( ::alignlib::Position const & pos, ::alignlib::Position const & offset ) const {
        if( bp::override func_applyOffset = this->get_override( "applyOffset" ) )
            return func_applyOffset( pos, offset );
        else
            return this->alignlib::AlignmentFormatBlocks::applyOffset( pos, offset );
    }

    virtual void copy( ::alignlib::HAlignment & dest ) const  {
        if( bp::override func_copy = this->get_override( "copy" ) )
            func_copy( dest );
        else
            this->alignlib::AlignmentFormatBlocks::copy( dest );
    }
    
    
    void default_copy( ::alignlib::HAlignment & dest ) const  {
        alignlib::AlignmentFormatBlocks::copy( dest );
    }

    virtual void fill( ::alignlib::HAlignment const & src ) {
        if( bp::override func_fill = this->get_override( "fill" ) )
            func_fill( src );
        else
            this->alignlib::AlignmentFormatBlocks::fill( src );
    }
    
    
    void default_fill( ::alignlib::HAlignment const & src ) {
        alignlib::AlignmentFormatBlocks::fill( src );
    }

    virtual void load( ::std::istream & arg0 ) {
        if( bp::override func_load = this->get_override( "load" ) )
            func_load( boost::ref(arg0) );
        else
            this->alignlib::AlignmentFormatBlocks::load( boost::ref(arg0) );
    }
    
    
    void default_load( ::std::istream & arg0 ) {
        alignlib::AlignmentFormatBlocks::load( boost::ref(arg0) );
    }

    virtual ::alignlib::Position removeOffset( ::alignlib::Position const & pos, ::alignlib::Position const & offset ) const {
        if( bp::override func_removeOffset = this->get_override( "removeOffset" ) )
            return func_removeOffset( pos, offset );
        else
            return this->alignlib::AlignmentFormatBlocks::removeOffset( pos, offset );
    }

    virtual void save( ::std::ostream & arg0 ) const  {
        if( bp::override func_save = this->get_override( "save" ) )
            func_save( boost::ref(arg0) );
        else
            this->alignlib::AlignmentFormatBlocks::save( boost::ref(arg0) );
    }
    
    
    void default_save( ::std::ostream & arg0 ) const  {
        alignlib::AlignmentFormatBlocks::save( boost::ref(arg0) );
    }

};

void register_AlignmentFormatBlocks_class(){

    { //::alignlib::AlignmentFormatBlocks
        typedef bp::class_< AlignmentFormatBlocks_wrapper, bp::bases< alignlib::AlignmentFormat > > AlignmentFormatBlocks_exposer_t;
        AlignmentFormatBlocks_exposer_t AlignmentFormatBlocks_exposer = AlignmentFormatBlocks_exposer_t( "AlignmentFormatBlocks", bp::init< >() );
        bp::scope AlignmentFormatBlocks_scope( AlignmentFormatBlocks_exposer );
        AlignmentFormatBlocks_exposer.def( bp::init< alignlib::HAlignment const & >(( bp::arg("src") )) );
        bp::implicitly_convertible< alignlib::HAlignment const &, alignlib::AlignmentFormatBlocks >();
        AlignmentFormatBlocks_exposer.def( bp::init< std::istream & >(( bp::arg("src") )) );
        bp::implicitly_convertible< std::istream &, alignlib::AlignmentFormatBlocks >();
        AlignmentFormatBlocks_exposer.def( bp::init< std::string const & >(( bp::arg("src") )) );
        bp::implicitly_convertible< std::string const &, alignlib::AlignmentFormatBlocks >();
        AlignmentFormatBlocks_exposer.def( bp::init< alignlib::AlignmentFormatBlocks const & >(( bp::arg("arg0") )) );
        { //::alignlib::AlignmentFormatBlocks::applyOffset
        
            typedef ::alignlib::Position ( AlignmentFormatBlocks_wrapper::*applyOffset_function_type )( ::alignlib::Position const &,::alignlib::Position const & ) const;
            
            AlignmentFormatBlocks_exposer.def( 
                "applyOffset"
                , applyOffset_function_type( &AlignmentFormatBlocks_wrapper::applyOffset )
                , ( bp::arg("pos"), bp::arg("offset") ) );
        
        }
        { //::alignlib::AlignmentFormatBlocks::copy
        
            typedef void ( ::alignlib::AlignmentFormatBlocks::*copy_function_type )( ::alignlib::HAlignment & ) const;
            typedef void ( AlignmentFormatBlocks_wrapper::*default_copy_function_type )( ::alignlib::HAlignment & ) const;
            
            AlignmentFormatBlocks_exposer.def( 
                "copy"
                , copy_function_type(&::alignlib::AlignmentFormatBlocks::copy)
                , default_copy_function_type(&AlignmentFormatBlocks_wrapper::default_copy)
                , ( bp::arg("dest") ) );
        
        }
        { //::alignlib::AlignmentFormatBlocks::fill
        
            typedef void ( ::alignlib::AlignmentFormatBlocks::*fill_function_type )( ::alignlib::HAlignment const & ) ;
            typedef void ( AlignmentFormatBlocks_wrapper::*default_fill_function_type )( ::alignlib::HAlignment const & ) ;
            
            AlignmentFormatBlocks_exposer.def( 
                "fill"
                , fill_function_type(&::alignlib::AlignmentFormatBlocks::fill)
                , default_fill_function_type(&AlignmentFormatBlocks_wrapper::default_fill)
                , ( bp::arg("src") ) );
        
        }
        { //::alignlib::AlignmentFormatBlocks::load
        
            typedef void ( ::alignlib::AlignmentFormatBlocks::*load_function_type )( ::std::istream & ) ;
            typedef void ( AlignmentFormatBlocks_wrapper::*default_load_function_type )( ::std::istream & ) ;
            
            AlignmentFormatBlocks_exposer.def( 
                "load"
                , load_function_type(&::alignlib::AlignmentFormatBlocks::load)
                , default_load_function_type(&AlignmentFormatBlocks_wrapper::default_load)
                , ( bp::arg("arg0") ) );
        
        }
        { //::alignlib::AlignmentFormatBlocks::removeOffset
        
            typedef ::alignlib::Position ( AlignmentFormatBlocks_wrapper::*removeOffset_function_type )( ::alignlib::Position const &,::alignlib::Position const & ) const;
            
            AlignmentFormatBlocks_exposer.def( 
                "removeOffset"
                , removeOffset_function_type( &AlignmentFormatBlocks_wrapper::removeOffset )
                , ( bp::arg("pos"), bp::arg("offset") ) );
        
        }
        { //::alignlib::AlignmentFormatBlocks::save
        
            typedef void ( ::alignlib::AlignmentFormatBlocks::*save_function_type )( ::std::ostream & ) const;
            typedef void ( AlignmentFormatBlocks_wrapper::*default_save_function_type )( ::std::ostream & ) const;
            
            AlignmentFormatBlocks_exposer.def( 
                "save"
                , save_function_type(&::alignlib::AlignmentFormatBlocks::save)
                , default_save_function_type(&AlignmentFormatBlocks_wrapper::default_save)
                , ( bp::arg("arg0") ) );
        
        }
        AlignmentFormatBlocks_exposer.def_readwrite( "mBlockSizes", &alignlib::AlignmentFormatBlocks::mBlockSizes );
        AlignmentFormatBlocks_exposer.def_readwrite( "mColStarts", &alignlib::AlignmentFormatBlocks::mColStarts );
        AlignmentFormatBlocks_exposer.def_readwrite( "mRowStarts", &alignlib::AlignmentFormatBlocks::mRowStarts );
    }

}
