// This file has been generated by Py++.

#include "boost/python.hpp"
#include "includes.h"
#include "iostream"
#include "cstdio"
#include "MatrixDouble.pypp.hpp"

namespace bp = boost::python;

void register_MatrixDouble_class(){

    { //::alignlib::Matrix< double >
        typedef bp::class_< alignlib::Matrix< double > > MatrixDouble_exposer_t;
        MatrixDouble_exposer_t MatrixDouble_exposer = MatrixDouble_exposer_t( "MatrixDouble", bp::init< unsigned int, unsigned int, bp::optional< double > >(( bp::arg("r"), bp::arg("c"), bp::arg("default_value")=0 )) );
        bp::scope MatrixDouble_scope( MatrixDouble_exposer );
        MatrixDouble_exposer.def( bp::init< alignlib::Matrix< double > const & >(( bp::arg("src") )) );
        { //::alignlib::Matrix< double >::addValue
        
            typedef alignlib::Matrix< double > exported_class_t;
            typedef void ( exported_class_t::*addValue_function_type )( unsigned int,unsigned int,double const & ) ;
            
            MatrixDouble_exposer.def( 
                "addValue"
                , addValue_function_type( &::alignlib::Matrix< double >::addValue )
                , ( bp::arg("row"), bp::arg("col"), bp::arg("value") ) );
        
        }
        { //::alignlib::Matrix< double >::getClone
        
            typedef alignlib::Matrix< double > exported_class_t;
            typedef ::boost::shared_ptr< alignlib::Matrix< double > > ( exported_class_t::*getClone_function_type )(  ) const;
            
            MatrixDouble_exposer.def( 
                "getClone"
                , getClone_function_type( &::alignlib::Matrix< double >::getClone ) );
        
        }
        { //::alignlib::Matrix< double >::getNew
        
            typedef alignlib::Matrix< double > exported_class_t;
            typedef ::boost::shared_ptr< alignlib::Matrix< double > > ( exported_class_t::*getNew_function_type )(  ) const;
            
            MatrixDouble_exposer.def( 
                "getNew"
                , getNew_function_type( &::alignlib::Matrix< double >::getNew ) );
        
        }
        { //::alignlib::Matrix< double >::getNumCols
        
            typedef alignlib::Matrix< double > exported_class_t;
            typedef unsigned int ( exported_class_t::*getNumCols_function_type )(  ) const;
            
            MatrixDouble_exposer.def( 
                "getNumCols"
                , getNumCols_function_type( &::alignlib::Matrix< double >::getNumCols ) );
        
        }
        { //::alignlib::Matrix< double >::getNumRows
        
            typedef alignlib::Matrix< double > exported_class_t;
            typedef unsigned int ( exported_class_t::*getNumRows_function_type )(  ) const;
            
            MatrixDouble_exposer.def( 
                "getNumRows"
                , getNumRows_function_type( &::alignlib::Matrix< double >::getNumRows ) );
        
        }
        { //::alignlib::Matrix< double >::getValue
        
            typedef alignlib::Matrix< double > exported_class_t;
            typedef double ( exported_class_t::*getValue_function_type )( unsigned int,unsigned int ) const;
            
            MatrixDouble_exposer.def( 
                "getValue"
                , getValue_function_type( &::alignlib::Matrix< double >::getValue )
                , ( bp::arg("row"), bp::arg("col") ) );
        
        }
        { //::alignlib::Matrix< double >::operator=
        
            typedef alignlib::Matrix< double > exported_class_t;
            typedef ::alignlib::Matrix< double > & ( exported_class_t::*assign_function_type )( ::alignlib::Matrix< double > const & ) ;
            
            MatrixDouble_exposer.def( 
                "assign"
                , assign_function_type( &::alignlib::Matrix< double >::operator= )
                , ( bp::arg("src") )
                , bp::return_self< >() );
        
        }
        MatrixDouble_exposer.def( bp::self == bp::self );
        { //::alignlib::Matrix< double >::setValue
        
            typedef alignlib::Matrix< double > exported_class_t;
            typedef void ( exported_class_t::*setValue_function_type )( unsigned int,unsigned int,double const & ) ;
            
            MatrixDouble_exposer.def( 
                "setValue"
                , setValue_function_type( &::alignlib::Matrix< double >::setValue )
                , ( bp::arg("row"), bp::arg("col"), bp::arg("value") ) );
        
        }
        { //::alignlib::Matrix< double >::swapRows
        
            typedef alignlib::Matrix< double > exported_class_t;
            typedef void ( exported_class_t::*swapRows_function_type )( unsigned int,unsigned int ) ;
            
            MatrixDouble_exposer.def( 
                "swapRows"
                , swapRows_function_type( &::alignlib::Matrix< double >::swapRows )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< alignlib::Matrix<double> > >();
        bp::implicitly_convertible< boost::shared_ptr< alignlib::Matrix< double > >, boost::shared_ptr< alignlib::ImplAlignlibBase > >();
        bp::implicitly_convertible< boost::shared_ptr< alignlib::Matrix< double > >, boost::shared_ptr< alignlib::AlignlibBase > >();
    }

}
