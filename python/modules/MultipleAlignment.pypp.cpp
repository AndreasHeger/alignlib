// This file has been generated by Py++.

#include "boost/python.hpp"
#include "includes.h"
#include "iostream"
#include "cstdio"
#include "MultipleAlignment.pypp.hpp"

namespace bp = boost::python;

void register_MultipleAlignment_class(){

    { //::alignlib::MultipleAlignment
        typedef bp::class_< alignlib::MultipleAlignment, boost::noncopyable > MultipleAlignment_exposer_t;
        MultipleAlignment_exposer_t MultipleAlignment_exposer = MultipleAlignment_exposer_t( "MultipleAlignment", bp::no_init );
        bp::scope MultipleAlignment_scope( MultipleAlignment_exposer );
        { //::alignlib::MultipleAlignment::add
        
            typedef void ( ::alignlib::MultipleAlignment::*add_function_type )( ::alignlib::HAlignatum const &,::alignlib::HAlignment const &,bool,bool,bool,bool,bool ) ;
            
            MultipleAlignment_exposer.def( 
                "add"
                , add_function_type( &::alignlib::MultipleAlignment::add )
                , ( bp::arg("src"), bp::arg("alignment"), bp::arg("mali_is_in_row")=(bool)(true), bp::arg("insert_gaps_mali")=(bool)(true), bp::arg("insert_gaps_alignatum")=(bool)(true), bp::arg("use_end_mali")=(bool)(false), bp::arg("use_end_alignatum")=(bool)(false) ) );
        
        }
        { //::alignlib::MultipleAlignment::add
        
            typedef void ( ::alignlib::MultipleAlignment::*add_function_type )( ::alignlib::HAlignatum const & ) ;
            
            MultipleAlignment_exposer.def( 
                "add"
                , add_function_type( &::alignlib::MultipleAlignment::add )
                , ( bp::arg("src") ) );
        
        }
        { //::alignlib::MultipleAlignment::add
        
            typedef void ( ::alignlib::MultipleAlignment::*add_function_type )( ::alignlib::HMultipleAlignment const &,::alignlib::HAlignment const &,bool,bool,bool,bool,bool ) ;
            
            MultipleAlignment_exposer.def( 
                "add"
                , add_function_type( &::alignlib::MultipleAlignment::add )
                , ( bp::arg("src"), bp::arg("alignment"), bp::arg("mali_is_in_row")=(bool)(true), bp::arg("insert_gaps_mali")=(bool)(true), bp::arg("insert_gaps_alignatum")=(bool)(true), bp::arg("use_end_mali")=(bool)(false), bp::arg("use_end_alignatum")=(bool)(false) ) );
        
        }
        { //::alignlib::MultipleAlignment::add
        
            typedef void ( ::alignlib::MultipleAlignment::*add_function_type )( ::alignlib::HMultipleAlignment const & ) ;
            
            MultipleAlignment_exposer.def( 
                "add"
                , add_function_type( &::alignlib::MultipleAlignment::add )
                , ( bp::arg("src") ) );
        
        }
        { //::alignlib::MultipleAlignment::clear
        
            typedef void ( ::alignlib::MultipleAlignment::*clear_function_type )(  ) ;
            
            MultipleAlignment_exposer.def( 
                "clear"
                , clear_function_type( &::alignlib::MultipleAlignment::clear ) );
        
        }
        { //::alignlib::MultipleAlignment::eraseRow
        
            typedef void ( ::alignlib::MultipleAlignment::*eraseRow_function_type )( int ) ;
            
            MultipleAlignment_exposer.def( 
                "eraseRow"
                , eraseRow_function_type( &::alignlib::MultipleAlignment::eraseRow )
                , ( bp::arg("row") ) );
        
        }
        { //::alignlib::MultipleAlignment::getClone
        
            typedef ::alignlib::HMultipleAlignment ( ::alignlib::MultipleAlignment::*getClone_function_type )(  ) const;
            
            MultipleAlignment_exposer.def( 
                "getClone"
                , getClone_function_type( &::alignlib::MultipleAlignment::getClone ) );
        
        }
        { //::alignlib::MultipleAlignment::getLength
        
            typedef ::alignlib::Position ( ::alignlib::MultipleAlignment::*getLength_function_type )(  ) const;
            
            MultipleAlignment_exposer.def( 
                "getLength"
                , getLength_function_type( &::alignlib::MultipleAlignment::getLength ) );
        
        }
        { //::alignlib::MultipleAlignment::getNew
        
            typedef ::alignlib::HMultipleAlignment ( ::alignlib::MultipleAlignment::*getNew_function_type )(  ) const;
            
            MultipleAlignment_exposer.def( 
                "getNew"
                , getNew_function_type( &::alignlib::MultipleAlignment::getNew ) );
        
        }
        { //::alignlib::MultipleAlignment::getNumSequences
        
            typedef int ( ::alignlib::MultipleAlignment::*getNumSequences_function_type )(  ) const;
            
            MultipleAlignment_exposer.def( 
                "getNumSequences"
                , getNumSequences_function_type( &::alignlib::MultipleAlignment::getNumSequences ) );
        
        }
        { //::alignlib::MultipleAlignment::getRow
        
            typedef ::alignlib::HAlignatum ( ::alignlib::MultipleAlignment::*getRow_function_type )( int ) const;
            
            MultipleAlignment_exposer.def( 
                "getRow"
                , getRow_function_type( &::alignlib::MultipleAlignment::getRow )
                , ( bp::arg("row") ) );
        
        }
        { //::alignlib::MultipleAlignment::isAligned
        
            typedef bool ( ::alignlib::MultipleAlignment::*isAligned_function_type )( ::alignlib::Position const & ) ;
            
            MultipleAlignment_exposer.def( 
                "isAligned"
                , isAligned_function_type( &::alignlib::MultipleAlignment::isAligned )
                , ( bp::arg("col") ) );
        
        }
        { //::alignlib::MultipleAlignment::isEmpty
        
            typedef bool ( ::alignlib::MultipleAlignment::*isEmpty_function_type )(  ) const;
            
            MultipleAlignment_exposer.def( 
                "isEmpty"
                , isEmpty_function_type( &::alignlib::MultipleAlignment::isEmpty ) );
        
        }
        { //::alignlib::MultipleAlignment::setLength
        
            typedef void ( ::alignlib::MultipleAlignment::*setLength_function_type )( ::alignlib::Position ) ;
            
            MultipleAlignment_exposer.def( 
                "setLength"
                , setLength_function_type( &::alignlib::MultipleAlignment::setLength )
                , ( bp::arg("length") ) );
        
        }
        { //::alignlib::MultipleAlignment::write
        
            typedef void ( ::alignlib::MultipleAlignment::*write_function_type )( ::std::ostream & ) const;
            
            MultipleAlignment_exposer.def( 
                "write"
                , write_function_type( &::alignlib::MultipleAlignment::write )
                , ( bp::arg("output") ) );
        
        }
        MultipleAlignment_exposer.def( bp::self_ns::str( bp::self ) );
        bp::register_ptr_to_python< boost::shared_ptr< alignlib::MultipleAlignment > >();
    }

}
