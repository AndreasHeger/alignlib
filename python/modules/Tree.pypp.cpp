// This file has been generated by Py++.

#include "boost/python.hpp"
#include "includes.h"
#include "iostream"
#include "cstdio"
#include "Tree.pypp.hpp"

namespace bp = boost::python;

void register_Tree_class(){

    { //::alignlib::Tree
        typedef bp::class_< alignlib::Tree, bp::bases< alignlib::AlignlibBase >, boost::noncopyable > Tree_exposer_t;
        Tree_exposer_t Tree_exposer = Tree_exposer_t( "Tree", bp::no_init );
        bp::scope Tree_scope( Tree_exposer );
        { //::alignlib::Tree::findLastParent
        
            typedef ::alignlib::Node ( ::alignlib::Tree::*findLastParent_function_type )( ::alignlib::Node const ) const;
            
            Tree_exposer.def( 
                "findLastParent"
                , findLastParent_function_type( &::alignlib::Tree::findLastParent )
                , ( bp::arg("node") ) );
        
        }
        { //::alignlib::Tree::getClone
        
            typedef ::alignlib::HTree ( ::alignlib::Tree::*getClone_function_type )(  ) const;
            
            Tree_exposer.def( 
                "getClone"
                , getClone_function_type( &::alignlib::Tree::getClone ) );
        
        }
        { //::alignlib::Tree::getHeight
        
            typedef ::alignlib::TreeHeight ( ::alignlib::Tree::*getHeight_function_type )( ::alignlib::Node ) const;
            
            Tree_exposer.def( 
                "getHeight"
                , getHeight_function_type( &::alignlib::Tree::getHeight )
                , ( bp::arg("node") ) );
        
        }
        { //::alignlib::Tree::getLeftChild
        
            typedef ::alignlib::Node ( ::alignlib::Tree::*getLeftChild_function_type )( ::alignlib::Node ) const;
            
            Tree_exposer.def( 
                "getLeftChild"
                , getLeftChild_function_type( &::alignlib::Tree::getLeftChild )
                , ( bp::arg("node") ) );
        
        }
        { //::alignlib::Tree::getNew
        
            typedef ::alignlib::HTree ( ::alignlib::Tree::*getNew_function_type )(  ) const;
            
            Tree_exposer.def( 
                "getNew"
                , getNew_function_type( &::alignlib::Tree::getNew ) );
        
        }
        { //::alignlib::Tree::getNoNode
        
            typedef ::alignlib::Node ( ::alignlib::Tree::*getNoNode_function_type )(  ) const;
            
            Tree_exposer.def( 
                "getNoNode"
                , getNoNode_function_type( &::alignlib::Tree::getNoNode ) );
        
        }
        { //::alignlib::Tree::getNodesBreadthFirstVisit
        
            typedef ::alignlib::HNodeVector ( ::alignlib::Tree::*getNodesBreadthFirstVisit_function_type )(  ) const;
            
            Tree_exposer.def( 
                "getNodesBreadthFirstVisit"
                , getNodesBreadthFirstVisit_function_type( &::alignlib::Tree::getNodesBreadthFirstVisit ) );
        
        }
        { //::alignlib::Tree::getNodesDepthFirstFinish
        
            typedef ::alignlib::HNodeVector ( ::alignlib::Tree::*getNodesDepthFirstFinish_function_type )(  ) const;
            
            Tree_exposer.def( 
                "getNodesDepthFirstFinish"
                , getNodesDepthFirstFinish_function_type( &::alignlib::Tree::getNodesDepthFirstFinish ) );
        
        }
        { //::alignlib::Tree::getNodesDepthFirstVisit
        
            typedef ::alignlib::HNodeVector ( ::alignlib::Tree::*getNodesDepthFirstVisit_function_type )(  ) const;
            
            Tree_exposer.def( 
                "getNodesDepthFirstVisit"
                , getNodesDepthFirstVisit_function_type( &::alignlib::Tree::getNodesDepthFirstVisit ) );
        
        }
        { //::alignlib::Tree::getNodesLeaves
        
            typedef ::alignlib::HNodeVector ( ::alignlib::Tree::*getNodesLeaves_function_type )(  ) const;
            
            Tree_exposer.def( 
                "getNodesLeaves"
                , getNodesLeaves_function_type( &::alignlib::Tree::getNodesLeaves ) );
        
        }
        { //::alignlib::Tree::getNumLeaves
        
            typedef ::alignlib::Node ( ::alignlib::Tree::*getNumLeaves_function_type )(  ) const;
            
            Tree_exposer.def( 
                "getNumLeaves"
                , getNumLeaves_function_type( &::alignlib::Tree::getNumLeaves ) );
        
        }
        { //::alignlib::Tree::getNumLeaves
        
            typedef ::alignlib::Node ( ::alignlib::Tree::*getNumLeaves_function_type )( ::alignlib::Node ) const;
            
            Tree_exposer.def( 
                "getNumLeaves"
                , getNumLeaves_function_type( &::alignlib::Tree::getNumLeaves )
                , ( bp::arg("node") ) );
        
        }
        { //::alignlib::Tree::getParent
        
            typedef ::alignlib::Node ( ::alignlib::Tree::*getParent_function_type )( ::alignlib::Node ) const;
            
            Tree_exposer.def( 
                "getParent"
                , getParent_function_type( &::alignlib::Tree::getParent )
                , ( bp::arg("node") ) );
        
        }
        { //::alignlib::Tree::getRightChild
        
            typedef ::alignlib::Node ( ::alignlib::Tree::*getRightChild_function_type )( ::alignlib::Node ) const;
            
            Tree_exposer.def( 
                "getRightChild"
                , getRightChild_function_type( &::alignlib::Tree::getRightChild )
                , ( bp::arg("node") ) );
        
        }
        { //::alignlib::Tree::getRoot
        
            typedef ::alignlib::Node ( ::alignlib::Tree::*getRoot_function_type )(  ) const;
            
            Tree_exposer.def( 
                "getRoot"
                , getRoot_function_type( &::alignlib::Tree::getRoot ) );
        
        }
        { //::alignlib::Tree::getWeight
        
            typedef ::alignlib::TreeWeight ( ::alignlib::Tree::*getWeight_function_type )( ::alignlib::Node,::alignlib::Node ) const;
            
            Tree_exposer.def( 
                "getWeight"
                , getWeight_function_type( &::alignlib::Tree::getWeight )
                , ( bp::arg("child"), bp::arg("parent") ) );
        
        }
        { //::alignlib::Tree::joinNodes
        
            typedef ::alignlib::Node ( ::alignlib::Tree::*joinNodes_function_type )( ::alignlib::Node const,::alignlib::Node const,::alignlib::TreeWeight const,::alignlib::TreeWeight const ) ;
            
            Tree_exposer.def( 
                "joinNodes"
                , joinNodes_function_type( &::alignlib::Tree::joinNodes )
                , ( bp::arg("node_1"), bp::arg("node_2"), bp::arg("weight_1"), bp::arg("weight_2") ) );
        
        }
        { //::alignlib::Tree::removeRoot
        
            typedef void ( ::alignlib::Tree::*removeRoot_function_type )(  ) ;
            
            Tree_exposer.def( 
                "removeRoot"
                , removeRoot_function_type( &::alignlib::Tree::removeRoot ) );
        
        }
        { //::alignlib::Tree::setHeight
        
            typedef void ( ::alignlib::Tree::*setHeight_function_type )( ::alignlib::Node,::alignlib::TreeHeight ) ;
            
            Tree_exposer.def( 
                "setHeight"
                , setHeight_function_type( &::alignlib::Tree::setHeight )
                , ( bp::arg("node"), bp::arg("height") ) );
        
        }
        { //::alignlib::Tree::setNumLeaves
        
            typedef void ( ::alignlib::Tree::*setNumLeaves_function_type )( unsigned int ) ;
            
            Tree_exposer.def( 
                "setNumLeaves"
                , setNumLeaves_function_type( &::alignlib::Tree::setNumLeaves )
                , ( bp::arg("num_leaves") ) );
        
        }
        { //::alignlib::Tree::setRoot
        
            typedef ::alignlib::Node ( ::alignlib::Tree::*setRoot_function_type )( ::alignlib::Node const,::alignlib::Node const,::alignlib::TreeWeight ) ;
            
            Tree_exposer.def( 
                "setRoot"
                , setRoot_function_type( &::alignlib::Tree::setRoot )
                , ( bp::arg("node_1"), bp::arg("node_2"), bp::arg("weight") ) );
        
        }
        { //::alignlib::Tree::setWeight
        
            typedef void ( ::alignlib::Tree::*setWeight_function_type )( ::alignlib::Node,::alignlib::Node,::alignlib::TreeWeight ) ;
            
            Tree_exposer.def( 
                "setWeight"
                , setWeight_function_type( &::alignlib::Tree::setWeight )
                , ( bp::arg("child"), bp::arg("parent"), bp::arg("weight") ) );
        
        }
        { //::alignlib::Tree::write
        
            typedef void ( ::alignlib::Tree::*write_function_type )( ::std::ostream & ) const;
            
            Tree_exposer.def( 
                "write"
                , write_function_type( &::alignlib::Tree::write )
                , ( bp::arg("output") ) );
        
        }
        Tree_exposer.def( bp::self_ns::str( bp::self ) );
        bp::register_ptr_to_python< boost::shared_ptr< alignlib::Tree > >();
        bp::implicitly_convertible< boost::shared_ptr< alignlib::Tree >, boost::shared_ptr< alignlib::AlignlibBase > >();
    }

}
