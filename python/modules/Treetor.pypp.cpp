// This file has been generated by Py++.

#include "boost/python.hpp"
#include "includes.h"
#include "iostream"
#include "cstdio"
#include "Treetor.pypp.hpp"

namespace bp = boost::python;

void register_Treetor_class(){

    { //::alignlib::Treetor
        typedef bp::class_< alignlib::Treetor, bp::bases< alignlib::AlignlibBase >, boost::noncopyable > Treetor_exposer_t;
        Treetor_exposer_t Treetor_exposer = Treetor_exposer_t( "Treetor", bp::no_init );
        bp::scope Treetor_scope( Treetor_exposer );
        { //::alignlib::Treetor::calculateTree
        
            typedef void ( ::alignlib::Treetor::*calculateTree_function_type )( ::alignlib::HTree &,::alignlib::HMultipleAlignment const & ) const;
            
            Treetor_exposer.def( 
                "calculateTree"
                , calculateTree_function_type( &::alignlib::Treetor::calculateTree )
                , ( bp::arg("dest"), bp::arg("src") ) );
        
        }
        { //::alignlib::Treetor::getClone
        
            typedef ::alignlib::HTreetor ( ::alignlib::Treetor::*getClone_function_type )(  ) const;
            
            Treetor_exposer.def( 
                "getClone"
                , getClone_function_type( &::alignlib::Treetor::getClone ) );
        
        }
        { //::alignlib::Treetor::getNew
        
            typedef ::alignlib::HTreetor ( ::alignlib::Treetor::*getNew_function_type )(  ) const;
            
            Treetor_exposer.def( 
                "getNew"
                , getNew_function_type( &::alignlib::Treetor::getNew ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< alignlib::Treetor > >();
        bp::implicitly_convertible< boost::shared_ptr< alignlib::Treetor >, boost::shared_ptr< alignlib::AlignlibBase > >();
    }

}
