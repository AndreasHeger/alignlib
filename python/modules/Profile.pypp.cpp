// This file has been generated by Py++.

#include "boost/python.hpp"
#include "includes.h"
#include "iostream"
#include "cstdio"
#include "Profile.pypp.hpp"

namespace bp = boost::python;

void register_Profile_class(){

    { //::alignlib::Profile
        typedef bp::class_< alignlib::Profile, bp::bases< alignlib::Alignandum >, boost::noncopyable > Profile_exposer_t;
        Profile_exposer_t Profile_exposer = Profile_exposer_t( "Profile", bp::no_init );
        bp::scope Profile_scope( Profile_exposer );
        { //::alignlib::Profile::add
        
            typedef void ( ::alignlib::Profile::*add_function_type )( ::alignlib::HAlignandum const &,::alignlib::HAlignment const &,bool const ) ;
            
            Profile_exposer.def( 
                "add"
                , add_function_type( &::alignlib::Profile::add )
                , ( bp::arg("src"), bp::arg("map_src2dest"), bp::arg("reverse_mapping")=(bool const)(false) ) );
        
        }
        { //::alignlib::Profile::getFrequencyMatrix
        
            typedef ::alignlib::HFrequencyMatrix ( ::alignlib::Profile::*getFrequencyMatrix_function_type )(  ) const;
            
            Profile_exposer.def( 
                "getFrequencyMatrix"
                , getFrequencyMatrix_function_type( &::alignlib::Profile::getFrequencyMatrix ) );
        
        }
        { //::alignlib::Profile::getScoreMatrix
        
            typedef ::alignlib::HScoreMatrix ( ::alignlib::Profile::*getScoreMatrix_function_type )(  ) const;
            
            Profile_exposer.def( 
                "getScoreMatrix"
                , getScoreMatrix_function_type( &::alignlib::Profile::getScoreMatrix ) );
        
        }
        { //::alignlib::Profile::getWeightedCountMatrix
        
            typedef ::alignlib::HWeightedCountMatrix ( ::alignlib::Profile::*getWeightedCountMatrix_function_type )(  ) const;
            
            Profile_exposer.def( 
                "getWeightedCountMatrix"
                , getWeightedCountMatrix_function_type( &::alignlib::Profile::getWeightedCountMatrix ) );
        
        }
        { //::alignlib::Profile::resize
        
            typedef void ( ::alignlib::Profile::*resize_function_type )( ::alignlib::Position ) ;
            
            Profile_exposer.def( 
                "resize"
                , resize_function_type( &::alignlib::Profile::resize )
                , ( bp::arg("length") ) );
        
        }
        Profile_exposer.def( bp::self_ns::str( bp::self ) );
        bp::register_ptr_to_python< boost::shared_ptr< alignlib::Profile > >();
        bp::implicitly_convertible< boost::shared_ptr< alignlib::Profile >, boost::shared_ptr< alignlib::AlignlibBase > >();
    }

}
