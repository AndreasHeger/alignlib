// This file has been generated by Py++.

#include "boost/python.hpp"
#include "includes.h"
#include "iostream"
#include "cstdio"
#include "AlignmentFormatDiagonals.pypp.hpp"

namespace bp = boost::python;

struct AlignmentFormatDiagonals_wrapper : alignlib::AlignmentFormatDiagonals, bp::wrapper< alignlib::AlignmentFormatDiagonals > {

    AlignmentFormatDiagonals_wrapper( )
    : alignlib::AlignmentFormatDiagonals( )
      , bp::wrapper< alignlib::AlignmentFormatDiagonals >(){
        // null constructor
    
    }

    AlignmentFormatDiagonals_wrapper(::alignlib::HAlignment const & src )
    : alignlib::AlignmentFormatDiagonals( src )
      , bp::wrapper< alignlib::AlignmentFormatDiagonals >(){
        // constructor
    
    }

    AlignmentFormatDiagonals_wrapper(::std::istream & src )
    : alignlib::AlignmentFormatDiagonals( boost::ref(src) )
      , bp::wrapper< alignlib::AlignmentFormatDiagonals >(){
        // constructor
    
    }

    AlignmentFormatDiagonals_wrapper(::std::string const & src )
    : alignlib::AlignmentFormatDiagonals( src )
      , bp::wrapper< alignlib::AlignmentFormatDiagonals >(){
        // constructor
    
    }

    AlignmentFormatDiagonals_wrapper(::alignlib::AlignmentFormatDiagonals const & arg0 )
    : alignlib::AlignmentFormatDiagonals( boost::ref(arg0) )
      , bp::wrapper< alignlib::AlignmentFormatDiagonals >(){
        // copy constructor
    
    }

    virtual void copy( ::alignlib::HAlignment & dest, bool const reverse ) const  {
        if( bp::override func_copy = this->get_override( "copy" ) )
            func_copy( dest, reverse );
        else
            this->alignlib::AlignmentFormatDiagonals::copy( dest, reverse );
    }
    
    
    void default_copy( ::alignlib::HAlignment & dest, bool const reverse ) const  {
        alignlib::AlignmentFormatDiagonals::copy( dest, reverse );
    }

    virtual void copy( ::alignlib::HAlignment & dest ) const  {
        if( bp::override func_copy = this->get_override( "copy" ) )
            func_copy( dest );
        else
            this->alignlib::AlignmentFormatDiagonals::copy( dest );
    }
    
    
    void default_copy( ::alignlib::HAlignment & dest ) const  {
        alignlib::AlignmentFormatDiagonals::copy( dest );
    }

    virtual void fill( ::alignlib::HAlignment const & src, bool const reverse, ::alignlib::Position const row_from=-0x000000001, ::alignlib::Position const row_to=-0x000000001, ::alignlib::Position const col_from=-0x000000001, ::alignlib::Position const col_to=-0x000000001, ::alignlib::Diagonal const diagonal_from=99999999, ::alignlib::Diagonal const diagonal_to=-0x005f5e0ff ) {
        if( bp::override func_fill = this->get_override( "fill" ) )
            func_fill( src, reverse, row_from, row_to, col_from, col_to, diagonal_from, diagonal_to );
        else
            this->alignlib::AlignmentFormatDiagonals::fill( src, reverse, row_from, row_to, col_from, col_to, diagonal_from, diagonal_to );
    }
    
    
    void default_fill( ::alignlib::HAlignment const & src, bool const reverse, ::alignlib::Position const row_from=-0x000000001, ::alignlib::Position const row_to=-0x000000001, ::alignlib::Position const col_from=-0x000000001, ::alignlib::Position const col_to=-0x000000001, ::alignlib::Diagonal const diagonal_from=99999999, ::alignlib::Diagonal const diagonal_to=-0x005f5e0ff ) {
        alignlib::AlignmentFormatDiagonals::fill( src, reverse, row_from, row_to, col_from, col_to, diagonal_from, diagonal_to );
    }

    virtual void fill( ::alignlib::HAlignment const & src ) {
        if( bp::override func_fill = this->get_override( "fill" ) )
            func_fill( src );
        else
            this->alignlib::AlignmentFormatDiagonals::fill( src );
    }
    
    
    void default_fill( ::alignlib::HAlignment const & src ) {
        alignlib::AlignmentFormatDiagonals::fill( src );
    }

    virtual void load( ::std::istream & arg0 ) {
        if( bp::override func_load = this->get_override( "load" ) )
            func_load( boost::ref(arg0) );
        else
            this->alignlib::AlignmentFormatDiagonals::load( boost::ref(arg0) );
    }
    
    
    void default_load( ::std::istream & arg0 ) {
        alignlib::AlignmentFormatDiagonals::load( boost::ref(arg0) );
    }

    virtual void save( ::std::ostream & arg0 ) const  {
        if( bp::override func_save = this->get_override( "save" ) )
            func_save( boost::ref(arg0) );
        else
            this->alignlib::AlignmentFormatDiagonals::save( boost::ref(arg0) );
    }
    
    
    void default_save( ::std::ostream & arg0 ) const  {
        alignlib::AlignmentFormatDiagonals::save( boost::ref(arg0) );
    }

};

void register_AlignmentFormatDiagonals_class(){

    { //::alignlib::AlignmentFormatDiagonals
        typedef bp::class_< AlignmentFormatDiagonals_wrapper, bp::bases< alignlib::AlignmentFormat > > AlignmentFormatDiagonals_exposer_t;
        AlignmentFormatDiagonals_exposer_t AlignmentFormatDiagonals_exposer = AlignmentFormatDiagonals_exposer_t( "AlignmentFormatDiagonals", bp::init< >() );
        bp::scope AlignmentFormatDiagonals_scope( AlignmentFormatDiagonals_exposer );
        AlignmentFormatDiagonals_exposer.def( bp::init< alignlib::HAlignment const & >(( bp::arg("src") )) );
        bp::implicitly_convertible< alignlib::HAlignment const &, alignlib::AlignmentFormatDiagonals >();
        AlignmentFormatDiagonals_exposer.def( bp::init< std::istream & >(( bp::arg("src") )) );
        bp::implicitly_convertible< std::istream &, alignlib::AlignmentFormatDiagonals >();
        AlignmentFormatDiagonals_exposer.def( bp::init< std::string const & >(( bp::arg("src") )) );
        bp::implicitly_convertible< std::string const &, alignlib::AlignmentFormatDiagonals >();
        AlignmentFormatDiagonals_exposer.def( bp::init< alignlib::AlignmentFormatDiagonals const & >(( bp::arg("arg0") )) );
        { //::alignlib::AlignmentFormatDiagonals::copy
        
            typedef void ( ::alignlib::AlignmentFormatDiagonals::*copy_function_type )( ::alignlib::HAlignment &,bool const ) const;
            typedef void ( AlignmentFormatDiagonals_wrapper::*default_copy_function_type )( ::alignlib::HAlignment &,bool const ) const;
            
            AlignmentFormatDiagonals_exposer.def( 
                "copy"
                , copy_function_type(&::alignlib::AlignmentFormatDiagonals::copy)
                , default_copy_function_type(&AlignmentFormatDiagonals_wrapper::default_copy)
                , ( bp::arg("dest"), bp::arg("reverse") ) );
        
        }
        { //::alignlib::AlignmentFormatDiagonals::copy
        
            typedef void ( ::alignlib::AlignmentFormatDiagonals::*copy_function_type )( ::alignlib::HAlignment & ) const;
            typedef void ( AlignmentFormatDiagonals_wrapper::*default_copy_function_type )( ::alignlib::HAlignment & ) const;
            
            AlignmentFormatDiagonals_exposer.def( 
                "copy"
                , copy_function_type(&::alignlib::AlignmentFormatDiagonals::copy)
                , default_copy_function_type(&AlignmentFormatDiagonals_wrapper::default_copy)
                , ( bp::arg("dest") ) );
        
        }
        { //::alignlib::AlignmentFormatDiagonals::fill
        
            typedef void ( ::alignlib::AlignmentFormatDiagonals::*fill_function_type )( ::alignlib::HAlignment const &,bool const,::alignlib::Position const,::alignlib::Position const,::alignlib::Position const,::alignlib::Position const,::alignlib::Diagonal const,::alignlib::Diagonal const ) ;
            typedef void ( AlignmentFormatDiagonals_wrapper::*default_fill_function_type )( ::alignlib::HAlignment const &,bool const,::alignlib::Position const,::alignlib::Position const,::alignlib::Position const,::alignlib::Position const,::alignlib::Diagonal const,::alignlib::Diagonal const ) ;
            
            AlignmentFormatDiagonals_exposer.def( 
                "fill"
                , fill_function_type(&::alignlib::AlignmentFormatDiagonals::fill)
                , default_fill_function_type(&AlignmentFormatDiagonals_wrapper::default_fill)
                , ( bp::arg("src"), bp::arg("reverse"), bp::arg("row_from")=(int const)(-0x000000001), bp::arg("row_to")=(int const)(-0x000000001), bp::arg("col_from")=(int const)(-0x000000001), bp::arg("col_to")=(int const)(-0x000000001), bp::arg("diagonal_from")=(long int const)(99999999), bp::arg("diagonal_to")=(long int const)(-0x005f5e0ff) ) );
        
        }
        { //::alignlib::AlignmentFormatDiagonals::fill
        
            typedef void ( ::alignlib::AlignmentFormatDiagonals::*fill_function_type )( ::alignlib::HAlignment const & ) ;
            typedef void ( AlignmentFormatDiagonals_wrapper::*default_fill_function_type )( ::alignlib::HAlignment const & ) ;
            
            AlignmentFormatDiagonals_exposer.def( 
                "fill"
                , fill_function_type(&::alignlib::AlignmentFormatDiagonals::fill)
                , default_fill_function_type(&AlignmentFormatDiagonals_wrapper::default_fill)
                , ( bp::arg("src") ) );
        
        }
        { //::alignlib::AlignmentFormatDiagonals::load
        
            typedef void ( ::alignlib::AlignmentFormatDiagonals::*load_function_type )( ::std::istream & ) ;
            typedef void ( AlignmentFormatDiagonals_wrapper::*default_load_function_type )( ::std::istream & ) ;
            
            AlignmentFormatDiagonals_exposer.def( 
                "load"
                , load_function_type(&::alignlib::AlignmentFormatDiagonals::load)
                , default_load_function_type(&AlignmentFormatDiagonals_wrapper::default_load)
                , ( bp::arg("arg0") ) );
        
        }
        { //::alignlib::AlignmentFormatDiagonals::save
        
            typedef void ( ::alignlib::AlignmentFormatDiagonals::*save_function_type )( ::std::ostream & ) const;
            typedef void ( AlignmentFormatDiagonals_wrapper::*default_save_function_type )( ::std::ostream & ) const;
            
            AlignmentFormatDiagonals_exposer.def( 
                "save"
                , save_function_type(&::alignlib::AlignmentFormatDiagonals::save)
                , default_save_function_type(&AlignmentFormatDiagonals_wrapper::default_save)
                , ( bp::arg("arg0") ) );
        
        }
        AlignmentFormatDiagonals_exposer.def_readwrite( "mAlignment", &alignlib::AlignmentFormatDiagonals::mAlignment );
    }

}
