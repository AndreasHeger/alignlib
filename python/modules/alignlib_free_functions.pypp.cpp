// This file has been generated by Py++.

#include "boost/python.hpp"
#include "includes.h"
#include "iostream"
#include "cstdio"
#include "alignlib_free_functions.pypp.hpp"

namespace bp = boost::python;

void register_free_functions(){

    { //::alignlib::addAlignment2Alignment
    
        typedef void ( *addAlignment2Alignment_function_type )( ::alignlib::HAlignment &,::alignlib::HAlignment const & );
        
        bp::def( 
            "addAlignment2Alignment"
            , addAlignment2Alignment_function_type( &::alignlib::addAlignment2Alignment )
            , ( bp::arg("dest"), bp::arg("src") ) );
    
    }

    { //::alignlib::addDiagonal2Alignment
    
        typedef void ( *addDiagonal2Alignment_function_type )( ::alignlib::HAlignment &,::alignlib::Position,::alignlib::Position,::alignlib::Position );
        
        bp::def( 
            "addDiagonal2Alignment"
            , addDiagonal2Alignment_function_type( &::alignlib::addDiagonal2Alignment )
            , ( bp::arg("dest"), bp::arg("row_from"), bp::arg("row_to"), bp::arg("col_offset")=(int)(0) ) );
    
    }

    { //::alignlib::addMappedAlignment2Alignment
    
        typedef void ( *addMappedAlignment2Alignment_function_type )( ::alignlib::HAlignment &,::alignlib::HAlignment const &,::alignlib::HAlignment const &,::alignlib::CombinationMode const );
        
        bp::def( 
            "addMappedAlignment2Alignment"
            , addMappedAlignment2Alignment_function_type( &::alignlib::addMappedAlignment2Alignment )
            , ( bp::arg("dest"), bp::arg("src"), bp::arg("map_src2new"), bp::arg("mode") ) );
    
    }

    { //::alignlib::addMappedAlignments2Alignment
    
        typedef void ( *addMappedAlignments2Alignment_function_type )( ::alignlib::HAlignment &,::alignlib::HAlignment const &,::alignlib::HAlignment const &,::alignlib::HAlignment const & );
        
        bp::def( 
            "addMappedAlignments2Alignment"
            , addMappedAlignments2Alignment_function_type( &::alignlib::addMappedAlignments2Alignment )
            , ( bp::arg("dest"), bp::arg("src"), bp::arg("map_src_row2dest_row"), bp::arg("map_src_col2dest_col") ) );
    
    }

    { //::alignlib::calculateAffineScore
    
        typedef void ( *calculateAffineScore_function_type )( ::alignlib::HAlignment &,::alignlib::Score const,::alignlib::Score const );
        
        bp::def( 
            "calculateAffineScore"
            , calculateAffineScore_function_type( &::alignlib::calculateAffineScore )
            , ( bp::arg("dest"), bp::arg("gop"), bp::arg("gep") ) );
    
    }

    { //::alignlib::calculateConservation
    
        typedef ::std::string ( *calculateConservation_function_type )( ::alignlib::HMultipleAlignment const &,::alignlib::Frequency const );
        
        bp::def( 
            "calculateConservation"
            , calculateConservation_function_type( &::alignlib::calculateConservation )
            , ( bp::arg("mali"), bp::arg("min_frequency") ) );
    
    }

    { //::alignlib::calculatePercentIdentity
    
        typedef double ( *calculatePercentIdentity_function_type )( ::alignlib::HAlignment const &,::alignlib::HAlignandum const &,::alignlib::HAlignandum const & );
        
        bp::def( 
            "calculatePercentIdentity"
            , calculatePercentIdentity_function_type( &::alignlib::calculatePercentIdentity )
            , ( bp::arg("src"), bp::arg("row"), bp::arg("col") ) );
    
    }

    { //::alignlib::calculatePercentSimilarity
    
        typedef double ( *calculatePercentSimilarity_function_type )( ::alignlib::HAlignment const & );
        
        bp::def( 
            "calculatePercentSimilarity"
            , calculatePercentSimilarity_function_type( &::alignlib::calculatePercentSimilarity )
            , ( bp::arg("src") ) );
    
    }

    { //::alignlib::calculateZScore
    
        typedef ::alignlib::Score ( *calculateZScore_function_type )( ::alignlib::Score,::alignlib::NormalDistributionParameters const * );
        
        bp::def( 
            "calculateZScore"
            , calculateZScore_function_type( &::alignlib::calculateZScore )
            , ( bp::arg("score"), bp::arg("params") ) );
    
    }

    { //::alignlib::calculateZScoreParameters
    
        typedef void ( *calculateZScoreParameters_function_type )( ::alignlib::NormalDistributionParameters *,::alignlib::HAlignandum const &,::alignlib::HAlignandum const &,::alignlib::HAlignator const &,unsigned int,unsigned int,::alignlib::Position );
        
        bp::def( 
            "calculateZScoreParameters"
            , calculateZScoreParameters_function_type( &::alignlib::calculateZScoreParameters )
            , ( bp::arg("result"), bp::arg("row"), bp::arg("col"), bp::arg("alignator"), bp::arg("n_iterations"), bp::arg("n_iterations_shuffle")=(unsigned int)(1), bp::arg("window_size")=(int)(0) ) );
    
    }

    { //::alignlib::checkAlignmentIdentity
    
        typedef bool ( *checkAlignmentIdentity_function_type )( ::alignlib::HAlignment const &,::alignlib::HAlignment const &,bool const );
        
        bp::def( 
            "checkAlignmentIdentity"
            , checkAlignmentIdentity_function_type( &::alignlib::checkAlignmentIdentity )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("invert")=(bool const)(false) ) );
    
    }

    { //::alignlib::checkMultAlignmentIdentity
    
        typedef bool ( *checkMultAlignmentIdentity_function_type )( ::alignlib::HMultAlignment const &,::alignlib::HMultAlignment const & );
        
        bp::def( 
            "checkMultAlignmentIdentity"
            , checkMultAlignmentIdentity_function_type( &::alignlib::checkMultAlignmentIdentity )
            , ( bp::arg("a"), bp::arg("b") ) );
    
    }

    { //::alignlib::combineAlignment
    
        typedef void ( *combineAlignment_function_type )( ::alignlib::HAlignment &,::alignlib::HAlignment const &,::alignlib::HAlignment const &,::alignlib::CombinationMode const );
        
        bp::def( 
            "combineAlignment"
            , combineAlignment_function_type( &::alignlib::combineAlignment )
            , ( bp::arg("dest"), bp::arg("src1"), bp::arg("src2"), bp::arg("mode") ) );
    
    }

    { //::alignlib::copyAlignment
    
        typedef void ( *copyAlignment_function_type )( ::alignlib::HAlignment &,::alignlib::HAlignment const &,::alignlib::HAlignment const &,::alignlib::CombinationMode const );
        
        bp::def( 
            "copyAlignment"
            , copyAlignment_function_type( &::alignlib::copyAlignment )
            , ( bp::arg("dest"), bp::arg("src"), bp::arg("filter"), bp::arg("mode") ) );
    
    }

    { //::alignlib::copyAlignment
    
        typedef void ( *copyAlignment_function_type )( ::alignlib::HAlignment &,::alignlib::HAlignment const &,::alignlib::Position,::alignlib::Position,::alignlib::Position,::alignlib::Position,::alignlib::Diagonal,::alignlib::Diagonal );
        
        bp::def( 
            "copyAlignment"
            , copyAlignment_function_type( &::alignlib::copyAlignment )
            , ( bp::arg("dest"), bp::arg("src"), bp::arg("row_from")=(int)(-0x000000001), bp::arg("row_to")=(int)(-0x000000001), bp::arg("col_from")=(int)(-0x000000001), bp::arg("col_to")=(int)(-0x000000001), bp::arg("diagonal_from")=(long int)(-0x005f5e0ff), bp::arg("diagonal_to")=(long int)(99999999) ) );
    
    }

    { //::alignlib::copyAlignmentWithoutRegion
    
        typedef void ( *copyAlignmentWithoutRegion_function_type )( ::alignlib::HAlignment &,::alignlib::HAlignment const &,::alignlib::Position,::alignlib::Position,::alignlib::Position,::alignlib::Position,::alignlib::Diagonal,::alignlib::Diagonal );
        
        bp::def( 
            "copyAlignmentWithoutRegion"
            , copyAlignmentWithoutRegion_function_type( &::alignlib::copyAlignmentWithoutRegion )
            , ( bp::arg("dest"), bp::arg("src"), bp::arg("row_from")=(int)(-0x000000001), bp::arg("row_to")=(int)(-0x000000001), bp::arg("col_from")=(int)(-0x000000001), bp::arg("col_to")=(int)(-0x000000001), bp::arg("diagonal_from")=(long int)(1), bp::arg("diagonal_to")=(long int)(0) ) );
    
    }

    { //::alignlib::copyMultipleAlignment
    
        typedef void ( *copyMultipleAlignment_function_type )( ::alignlib::HMultipleAlignment &,::alignlib::HMultipleAlignment const &,unsigned int,unsigned int );
        
        bp::def( 
            "copyMultipleAlignment"
            , copyMultipleAlignment_function_type( &::alignlib::copyMultipleAlignment )
            , ( bp::arg("dest"), bp::arg("src"), bp::arg("first_row")=(unsigned int)(0), bp::arg("last_row")=(unsigned int)(0) ) );
    
    }

    { //::alignlib::expandAlignment
    
        typedef void ( *expandAlignment_function_type )( ::alignlib::HAlignment &,::alignlib::HAlignment &,::alignlib::HAlignment const &,bool const,bool const,bool const,bool const,::alignlib::Position const,::alignlib::Position const );
        
        bp::def( 
            "expandAlignment"
            , expandAlignment_function_type( &::alignlib::expandAlignment )
            , ( bp::arg("map_row2combined"), bp::arg("map_col2combined"), bp::arg("src"), bp::arg("insert_gaps_row")=(bool const)(true), bp::arg("insert_gaps_col")=(bool const)(true), bp::arg("use_end_row")=(bool const)(false), bp::arg("use_end_col")=(bool const)(false), bp::arg("row_length")=(int const)(-0x000000001), bp::arg("col_length")=(int const)(-0x000000001) ) );
    
    }

    { //::alignlib::fillAlignmentGaps
    
        typedef void ( *fillAlignmentGaps_function_type )( ::alignlib::HAlignment &,::alignlib::HAlignator const &,::alignlib::HAlignandum const &,::alignlib::HAlignandum const & );
        
        bp::def( 
            "fillAlignmentGaps"
            , fillAlignmentGaps_function_type( &::alignlib::fillAlignmentGaps )
            , ( bp::arg("dest"), bp::arg("alignator"), bp::arg("row"), bp::arg("col") ) );
    
    }

    { //::alignlib::fillAlignmentGaps
    
        typedef void ( *fillAlignmentGaps_function_type )( ::alignlib::HAlignment &,::alignlib::Position const );
        
        bp::def( 
            "fillAlignmentGaps"
            , fillAlignmentGaps_function_type( &::alignlib::fillAlignmentGaps )
            , ( bp::arg("dest"), bp::arg("max_length") ) );
    
    }

    { //::alignlib::fillAlignmentRepeatUnit
    
        typedef void ( *fillAlignmentRepeatUnit_function_type )( ::alignlib::HAlignment &,::alignlib::HAlignment const &,::alignlib::Position const,bool const );
        
        bp::def( 
            "fillAlignmentRepeatUnit"
            , fillAlignmentRepeatUnit_function_type( &::alignlib::fillAlignmentRepeatUnit )
            , ( bp::arg("dest"), bp::arg("source"), bp::arg("first_row_residue")=(int const)(-0x000000001), bp::arg("skip_negative_ends")=(bool const)(false) ) );
    
    }

    { //::alignlib::fillDistanceMatrix
    
        typedef void ( *fillDistanceMatrix_function_type )( ::alignlib::HDistanceMatrix &,::alignlib::DistanceMatrixValue * );
        
        bp::def( 
            "fillDistanceMatrix"
            , fillDistanceMatrix_function_type( &::alignlib::fillDistanceMatrix )
            , ( bp::arg("dest"), bp::arg("source") ) );
    
    }

    { //::alignlib::fillMultipleAlignment
    
        typedef void ( *fillMultipleAlignment_function_type )( ::alignlib::HMultipleAlignment &,::std::string const &,int );
        
        bp::def( 
            "fillMultipleAlignment"
            , fillMultipleAlignment_function_type( &::alignlib::fillMultipleAlignment )
            , ( bp::arg("dst"), bp::arg("sequences"), bp::arg("nsequences") ) );
    
    }

    { //::alignlib::filterAlignmentRemovePairs
    
        typedef void ( *filterAlignmentRemovePairs_function_type )( ::alignlib::HAlignment &,::alignlib::HAlignment const &,::alignlib::CombinationMode const );
        
        bp::def( 
            "filterAlignmentRemovePairs"
            , filterAlignmentRemovePairs_function_type( &::alignlib::filterAlignmentRemovePairs )
            , ( bp::arg("dest"), bp::arg("filter"), bp::arg("mode") ) );
    
    }

    { //::alignlib::filterAlignmentRemovePairwiseSorted
    
        typedef void ( *filterAlignmentRemovePairwiseSorted_function_type )( ::alignlib::HAlignment &,::alignlib::HAlignment const &,::alignlib::CombinationMode const );
        
        bp::def( 
            "filterAlignmentRemovePairwiseSorted"
            , filterAlignmentRemovePairwiseSorted_function_type( &::alignlib::filterAlignmentRemovePairwiseSorted )
            , ( bp::arg("dest"), bp::arg("filter"), bp::arg("mode") ) );
    
    }

    { //::alignlib::flattenAlignment
    
        typedef void ( *flattenAlignment_function_type )( ::alignlib::HAlignment & );
        
        bp::def( 
            "flattenAlignment"
            , flattenAlignment_function_type( &::alignlib::flattenAlignment )
            , ( bp::arg("dest") ) );
    
    }

    { //::alignlib::getAlignmentOverlap
    
        typedef ::alignlib::Position ( *getAlignmentOverlap_function_type )( ::alignlib::HAlignment const &,::alignlib::HAlignment const &,::alignlib::CombinationMode const );
        
        bp::def( 
            "getAlignmentOverlap"
            , getAlignmentOverlap_function_type( &::alignlib::getAlignmentOverlap )
            , ( bp::arg("src1"), bp::arg("src2"), bp::arg("mode") ) );
    
    }

    { //::alignlib::getAlignmentShortestDistance
    
        typedef ::alignlib::Position ( *getAlignmentShortestDistance_function_type )( ::alignlib::HAlignment const &,::alignlib::HAlignment const &,::alignlib::CombinationMode const );
        
        bp::def( 
            "getAlignmentShortestDistance"
            , getAlignmentShortestDistance_function_type( &::alignlib::getAlignmentShortestDistance )
            , ( bp::arg("src1"), bp::arg("src2"), bp::arg("mode") ) );
    
    }

    { //::alignlib::getDefaultDistor
    
        typedef ::alignlib::HDistor ( *getDefaultDistor_function_type )(  );
        
        bp::def( 
            "getDefaultDistor"
            , getDefaultDistor_function_type( &::alignlib::getDefaultDistor ) );
    
    }

    { //::alignlib::getDefaultEncoder
    
        typedef ::alignlib::HEncoder ( *getDefaultEncoder_function_type )(  );
        
        bp::def( 
            "getDefaultEncoder"
            , getDefaultEncoder_function_type( &::alignlib::getDefaultEncoder ) );
    
    }

    { //::alignlib::getDefaultIterator2D
    
        typedef ::alignlib::HIterator2D ( *getDefaultIterator2D_function_type )(  );
        
        bp::def( 
            "getDefaultIterator2D"
            , getDefaultIterator2D_function_type( &::alignlib::getDefaultIterator2D ) );
    
    }

    { //::alignlib::getDefaultLogOddor
    
        typedef ::alignlib::HLogOddor ( *getDefaultLogOddor_function_type )(  );
        
        bp::def( 
            "getDefaultLogOddor"
            , getDefaultLogOddor_function_type( &::alignlib::getDefaultLogOddor ) );
    
    }

    { //::alignlib::getDefaultRegularizor
    
        typedef ::alignlib::HRegularizor ( *getDefaultRegularizor_function_type )(  );
        
        bp::def( 
            "getDefaultRegularizor"
            , getDefaultRegularizor_function_type( &::alignlib::getDefaultRegularizor ) );
    
    }

    { //::alignlib::getDefaultScorer
    
        typedef ::alignlib::HScorer ( *getDefaultScorer_function_type )(  );
        
        bp::def( 
            "getDefaultScorer"
            , getDefaultScorer_function_type( &::alignlib::getDefaultScorer ) );
    
    }

    { //::alignlib::getDefaultSubstitutionMatrix
    
        typedef ::alignlib::HSubstitutionMatrix ( *getDefaultSubstitutionMatrix_function_type )(  );
        
        bp::def( 
            "getDefaultSubstitutionMatrix"
            , getDefaultSubstitutionMatrix_function_type( &::alignlib::getDefaultSubstitutionMatrix ) );
    
    }

    { //::alignlib::getDefaultToolkit
    
        typedef ::alignlib::HToolkit ( *getDefaultToolkit_function_type )(  );
        
        bp::def( 
            "getDefaultToolkit"
            , getDefaultToolkit_function_type( &::alignlib::getDefaultToolkit ) );
    
    }

    { //::alignlib::getDefaultTreetor
    
        typedef ::alignlib::HTreetor ( *getDefaultTreetor_function_type )(  );
        
        bp::def( 
            "getDefaultTreetor"
            , getDefaultTreetor_function_type( &::alignlib::getDefaultTreetor ) );
    
    }

    { //::alignlib::getDefaultWeightor
    
        typedef ::alignlib::HWeightor ( *getDefaultWeightor_function_type )(  );
        
        bp::def( 
            "getDefaultWeightor"
            , getDefaultWeightor_function_type( &::alignlib::getDefaultWeightor ) );
    
    }

    { //::alignlib::getEncoder
    
        typedef ::alignlib::HEncoder const ( *getEncoder_function_type )( ::alignlib::AlphabetType const & );
        
        bp::def( 
            "getEncoder"
            , getEncoder_function_type( &::alignlib::getEncoder )
            , ( bp::arg("alphabet") ) );
    
    }

    { //::alignlib::hasAlignmentOverlap
    
        typedef bool ( *hasAlignmentOverlap_function_type )( ::alignlib::HAlignment const &,::alignlib::HAlignment const &,::alignlib::CombinationMode const,int );
        
        bp::def( 
            "hasAlignmentOverlap"
            , hasAlignmentOverlap_function_type( &::alignlib::hasAlignmentOverlap )
            , ( bp::arg("src1"), bp::arg("src2"), bp::arg("mode"), bp::arg("min_overlap")=(int)(1) ) );
    
    }

    { //::alignlib::loadSubstitutionMatrix
    
        typedef ::alignlib::HSubstitutionMatrix ( *loadSubstitutionMatrix_function_type )( ::std::istream &,::alignlib::HEncoder const & );
        
        bp::def( 
            "loadSubstitutionMatrix"
            , loadSubstitutionMatrix_function_type( &::alignlib::loadSubstitutionMatrix )
            , ( bp::arg("input"), bp::arg("translator") ) );
    
    }

    { //::alignlib::makeAlignatorDPFull
    
        typedef ::alignlib::HAlignator ( *makeAlignatorDPFull_function_type )( ::alignlib::AlignmentType,::alignlib::Score,::alignlib::Score,bool,bool,bool,bool );
        
        bp::def( 
            "makeAlignatorDPFull"
            , makeAlignatorDPFull_function_type( &::alignlib::makeAlignatorDPFull )
            , ( bp::arg("alignment_type"), bp::arg("gop"), bp::arg("gep"), bp::arg("penalize_row_left")=(bool)(false), bp::arg("penalize_row_right")=(bool)(false), bp::arg("penalize_col_left")=(bool)(false), bp::arg("penalize_col_right")=(bool)(false) ) );
    
    }

    { //::alignlib::makeAlignatorDots
    
        typedef ::alignlib::HAlignator ( *makeAlignatorDots_function_type )( ::alignlib::HAlignator const &,::alignlib::Score,::alignlib::Score );
        
        bp::def( 
            "makeAlignatorDots"
            , makeAlignatorDots_function_type( &::alignlib::makeAlignatorDots )
            , ( bp::arg("alignator"), bp::arg("gop"), bp::arg("gep") ) );
    
    }

    { //::alignlib::makeAlignatorDotsDiagonal
    
        typedef ::alignlib::HAlignator ( *makeAlignatorDotsDiagonal_function_type )( ::alignlib::HAlignator const &,::alignlib::Score,::alignlib::Score,::alignlib::Score,::alignlib::Score );
        
        bp::def( 
            "makeAlignatorDotsDiagonal"
            , makeAlignatorDotsDiagonal_function_type( &::alignlib::makeAlignatorDotsDiagonal )
            , ( bp::arg("alignator"), bp::arg("gop"), bp::arg("gep"), bp::arg("diagnal_gop")=0, bp::arg("diagonal_gep")=0 ) );
    
    }

    { //::alignlib::makeAlignatorFragments
    
        typedef ::alignlib::HAlignator ( *makeAlignatorFragments_function_type )( ::alignlib::Score,::alignlib::Score,::alignlib::HFragmentor const & );
        
        bp::def( 
            "makeAlignatorFragments"
            , makeAlignatorFragments_function_type( &::alignlib::makeAlignatorFragments )
            , ( bp::arg("gop"), bp::arg("gep"), bp::arg("fragmentor") ) );
    
    }

    { //::alignlib::makeAlignatorGroupies
    
        typedef ::alignlib::HAlignator ( *makeAlignatorGroupies_function_type )(  );
        
        bp::def( 
            "makeAlignatorGroupies"
            , makeAlignatorGroupies_function_type( &::alignlib::makeAlignatorGroupies ) );
    
    }

    { //::alignlib::makeAlignatorGroupies
    
        typedef ::alignlib::HAlignator ( *makeAlignatorGroupies_function_type )( ::alignlib::Position const,::alignlib::Position const,::alignlib::HAlignator const &,::alignlib::HAlignator const &,::alignlib::Score const &,::alignlib::Score const & );
        
        bp::def( 
            "makeAlignatorGroupies"
            , makeAlignatorGroupies_function_type( &::alignlib::makeAlignatorGroupies )
            , ( bp::arg("tube_size"), bp::arg("tuple_size"), bp::arg("alignator_dots"), bp::arg("alignator_gaps"), bp::arg("gop"), bp::arg("gep") ) );
    
    }

    { //::alignlib::makeAlignatorIdentity
    
        typedef ::alignlib::HAlignator ( *makeAlignatorIdentity_function_type )(  );
        
        bp::def( 
            "makeAlignatorIdentity"
            , makeAlignatorIdentity_function_type( &::alignlib::makeAlignatorIdentity ) );
    
    }

    { //::alignlib::makeAlignatorIterative
    
        typedef ::alignlib::HAlignator ( *makeAlignatorIterative_function_type )( ::alignlib::HAlignator const &,::alignlib::Score );
        
        bp::def( 
            "makeAlignatorIterative"
            , makeAlignatorIterative_function_type( &::alignlib::makeAlignatorIterative )
            , ( bp::arg("alignator"), bp::arg("min_score") ) );
    
    }

    { //::alignlib::makeAlignatorPrebuilt
    
        typedef ::alignlib::HAlignator ( *makeAlignatorPrebuilt_function_type )( ::alignlib::HAlignment const & );
        
        bp::def( 
            "makeAlignatorPrebuilt"
            , makeAlignatorPrebuilt_function_type( &::alignlib::makeAlignatorPrebuilt )
            , ( bp::arg("ali") ) );
    
    }

    { //::alignlib::makeAlignatorSimilarity
    
        typedef ::alignlib::HAlignator ( *makeAlignatorSimilarity_function_type )(  );
        
        bp::def( 
            "makeAlignatorSimilarity"
            , makeAlignatorSimilarity_function_type( &::alignlib::makeAlignatorSimilarity ) );
    
    }

    { //::alignlib::makeAlignatorTuples
    
        typedef ::alignlib::HAlignator ( *makeAlignatorTuples_function_type )( int );
        
        bp::def( 
            "makeAlignatorTuples"
            , makeAlignatorTuples_function_type( &::alignlib::makeAlignatorTuples )
            , ( bp::arg("ktuple")=(int)(3) ) );
    
    }

    { //::alignlib::makeAlignatum
    
        typedef ::alignlib::HAlignatum ( *makeAlignatum_function_type )(  );
        
        bp::def( 
            "makeAlignatum"
            , makeAlignatum_function_type( &::alignlib::makeAlignatum ) );
    
    }

    { //::alignlib::makeAlignatum
    
        typedef ::alignlib::HAlignatum ( *makeAlignatum_function_type )( ::alignlib::HAlignandum const &,::alignlib::Position const &,::alignlib::Position const & );
        
        bp::def( 
            "makeAlignatum"
            , makeAlignatum_function_type( &::alignlib::makeAlignatum )
            , ( bp::arg("src"), bp::arg("from")=-0x000000001, bp::arg("to")=-0x000000001 ) );
    
    }

    { //::alignlib::makeAlignatum
    
        typedef ::alignlib::HAlignatum ( *makeAlignatum_function_type )( ::alignlib::HAlignandum const &,::alignlib::HAlignment const &,::alignlib::Position const & );
        
        bp::def( 
            "makeAlignatum"
            , makeAlignatum_function_type( &::alignlib::makeAlignatum )
            , ( bp::arg("src"), bp::arg("map_this2new"), bp::arg("max_length")=0 ) );
    
    }

    { //::alignlib::makeAlignatum
    
        typedef ::alignlib::HAlignatum ( *makeAlignatum_function_type )( ::std::string const &,::alignlib::HAlignment const &,::alignlib::Position const & );
        
        bp::def( 
            "makeAlignatum"
            , makeAlignatum_function_type( &::alignlib::makeAlignatum )
            , ( bp::arg("src"), bp::arg("map_src2aligned"), bp::arg("max_length")=0 ) );
    
    }

    { //::alignlib::makeAlignatum
    
        typedef ::alignlib::HAlignatum ( *makeAlignatum_function_type )( ::std::string const &,::alignlib::Position const &,::alignlib::Position const & );
        
        bp::def( 
            "makeAlignatum"
            , makeAlignatum_function_type( &::alignlib::makeAlignatum )
            , ( bp::arg("src"), bp::arg("from")=-0x000000001, bp::arg("to")=-0x000000001 ) );
    
    }

    { //::alignlib::makeAlignmentBlocks
    
        typedef ::alignlib::HAlignment ( *makeAlignmentBlocks_function_type )(  );
        
        bp::def( 
            "makeAlignmentBlocks"
            , makeAlignmentBlocks_function_type( &::alignlib::makeAlignmentBlocks ) );
    
    }

    { //::alignlib::makeAlignmentHash
    
        typedef ::alignlib::HAlignment ( *makeAlignmentHash_function_type )(  );
        
        bp::def( 
            "makeAlignmentHash"
            , makeAlignmentHash_function_type( &::alignlib::makeAlignmentHash ) );
    
    }

    { //::alignlib::makeAlignmentHashDiagonal
    
        typedef ::alignlib::HAlignment ( *makeAlignmentHashDiagonal_function_type )(  );
        
        bp::def( 
            "makeAlignmentHashDiagonal"
            , makeAlignmentHashDiagonal_function_type( &::alignlib::makeAlignmentHashDiagonal ) );
    
    }

    { //::alignlib::makeAlignmentMatrixDiagonal
    
        typedef ::alignlib::HAlignment ( *makeAlignmentMatrixDiagonal_function_type )(  );
        
        bp::def( 
            "makeAlignmentMatrixDiagonal"
            , makeAlignmentMatrixDiagonal_function_type( &::alignlib::makeAlignmentMatrixDiagonal ) );
    
    }

    { //::alignlib::makeAlignmentMatrixRow
    
        typedef ::alignlib::HAlignment ( *makeAlignmentMatrixRow_function_type )(  );
        
        bp::def( 
            "makeAlignmentMatrixRow"
            , makeAlignmentMatrixRow_function_type( &::alignlib::makeAlignmentMatrixRow ) );
    
    }

    { //::alignlib::makeAlignmentMatrixUnsorted
    
        typedef ::alignlib::HAlignment ( *makeAlignmentMatrixUnsorted_function_type )(  );
        
        bp::def( 
            "makeAlignmentMatrixUnsorted"
            , makeAlignmentMatrixUnsorted_function_type( &::alignlib::makeAlignmentMatrixUnsorted ) );
    
    }

    { //::alignlib::makeAlignmentSet
    
        typedef ::alignlib::HAlignment ( *makeAlignmentSet_function_type )(  );
        
        bp::def( 
            "makeAlignmentSet"
            , makeAlignmentSet_function_type( &::alignlib::makeAlignmentSet ) );
    
    }

    { //::alignlib::makeAlignmentSetCol
    
        typedef ::alignlib::HAlignment ( *makeAlignmentSetCol_function_type )(  );
        
        bp::def( 
            "makeAlignmentSetCol"
            , makeAlignmentSetCol_function_type( &::alignlib::makeAlignmentSetCol ) );
    
    }

    { //::alignlib::makeAlignmentVector
    
        typedef ::alignlib::HAlignment ( *makeAlignmentVector_function_type )(  );
        
        bp::def( 
            "makeAlignmentVector"
            , makeAlignmentVector_function_type( &::alignlib::makeAlignmentVector ) );
    
    }

    { //::alignlib::makeDistanceMatrixSymmetric
    
        typedef ::alignlib::HDistanceMatrix ( *makeDistanceMatrixSymmetric_function_type )( ::alignlib::DistanceMatrixSize,::alignlib::DistanceMatrixValue );
        
        bp::def( 
            "makeDistanceMatrixSymmetric"
            , makeDistanceMatrixSymmetric_function_type( &::alignlib::makeDistanceMatrixSymmetric )
            , ( bp::arg("size")=(long unsigned int)(0), bp::arg("default_value")=0 ) );
    
    }

    { //::alignlib::makeDistorClustal
    
        typedef ::alignlib::HDistor ( *makeDistorClustal_function_type )(  );
        
        bp::def( 
            "makeDistorClustal"
            , makeDistorClustal_function_type( &::alignlib::makeDistorClustal ) );
    
    }

    { //::alignlib::makeDistorDummy
    
        typedef ::alignlib::HDistor ( *makeDistorDummy_function_type )( ::alignlib::HDistanceMatrix const & );
        
        bp::def( 
            "makeDistorDummy"
            , makeDistorDummy_function_type( &::alignlib::makeDistorDummy )
            , ( bp::arg("matrix") ) );
    
    }

    { //::alignlib::makeDistorKimura
    
        typedef ::alignlib::HDistor ( *makeDistorKimura_function_type )(  );
        
        bp::def( 
            "makeDistorKimura"
            , makeDistorKimura_function_type( &::alignlib::makeDistorKimura ) );
    
    }

    { //::alignlib::makeEVDParameters
    
        typedef ::alignlib::EVDParameters * ( *makeEVDParameters_function_type )(  );
        
        bp::def( 
            "makeEVDParameters"
            , makeEVDParameters_function_type( &::alignlib::makeEVDParameters )
            , bp::return_value_policy< bp::manage_new_object >() );
    
    }

    { //::alignlib::makeEncoder
    
        typedef ::alignlib::HEncoder const ( *makeEncoder_function_type )( ::alignlib::AlphabetType const & );
        
        bp::def( 
            "makeEncoder"
            , makeEncoder_function_type( &::alignlib::makeEncoder )
            , ( bp::arg("alphabet") ) );
    
    }

    { //::alignlib::makeEntropyVector
    
        typedef ::alignlib::VectorDouble * ( *makeEntropyVector_function_type )( ::alignlib::WeightedCountMatrix const * );
        
        bp::def( 
            "makeEntropyVector"
            , makeEntropyVector_function_type( &::alignlib::makeEntropyVector )
            , ( bp::arg("src") )
            , bp::return_value_policy< bp::manage_new_object >() );
    
    }

    { //::alignlib::makeFragmentorDiagonals
    
        typedef ::alignlib::HFragmentor ( *makeFragmentorDiagonals_function_type )( ::alignlib::HAlignator const &,::alignlib::Score,::alignlib::Score );
        
        bp::def( 
            "makeFragmentorDiagonals"
            , makeFragmentorDiagonals_function_type( &::alignlib::makeFragmentorDiagonals )
            , ( bp::arg("alignator"), bp::arg("gop"), bp::arg("gep") ) );
    
    }

    { //::alignlib::makeFragmentorIterative
    
        typedef ::alignlib::HFragmentor ( *makeFragmentorIterative_function_type )( ::alignlib::HAlignment const &,::alignlib::Score,::alignlib::Score,::alignlib::Score );
        
        bp::def( 
            "makeFragmentorIterative"
            , makeFragmentorIterative_function_type( &::alignlib::makeFragmentorIterative )
            , ( bp::arg("dots"), bp::arg("min_score"), bp::arg("gop"), bp::arg("gep") ) );
    
    }

    { //::alignlib::makeFragmentorRepetitive
    
        typedef ::alignlib::HFragmentor ( *makeFragmentorRepetitive_function_type )( ::alignlib::HAlignator const &,::alignlib::Score );
        
        bp::def( 
            "makeFragmentorRepetitive"
            , makeFragmentorRepetitive_function_type( &::alignlib::makeFragmentorRepetitive )
            , ( bp::arg("alignator"), bp::arg("min_score") ) );
    
    }

    { //::alignlib::makeIterator2DBanded
    
        typedef ::alignlib::HIterator2D ( *makeIterator2DBanded_function_type )( ::alignlib::Diagonal const,::alignlib::Diagonal const );
        
        bp::def( 
            "makeIterator2DBanded"
            , makeIterator2DBanded_function_type( &::alignlib::makeIterator2DBanded )
            , ( bp::arg("lower_diagonal")=(long int const)(0), bp::arg("upper_diagonal")=(long int const)(0) ) );
    
    }

    { //::alignlib::makeIterator2DBanded
    
        typedef ::alignlib::HIterator2D ( *makeIterator2DBanded_function_type )( ::alignlib::HAlignandum const &,::alignlib::HAlignandum const &,::alignlib::Diagonal const,::alignlib::Diagonal const );
        
        bp::def( 
            "makeIterator2DBanded"
            , makeIterator2DBanded_function_type( &::alignlib::makeIterator2DBanded )
            , ( bp::arg("row"), bp::arg("col"), bp::arg("lower_diagonal")=(long int const)(0), bp::arg("upper_diagonal")=(long int const)(0) ) );
    
    }

    { //::alignlib::makeIterator2DFull
    
        typedef ::alignlib::HIterator2D ( *makeIterator2DFull_function_type )(  );
        
        bp::def( 
            "makeIterator2DFull"
            , makeIterator2DFull_function_type( &::alignlib::makeIterator2DFull ) );
    
    }

    { //::alignlib::makeIterator2DFull
    
        typedef ::alignlib::HIterator2D ( *makeIterator2DFull_function_type )( ::alignlib::HAlignandum const &,::alignlib::HAlignandum const & );
        
        bp::def( 
            "makeIterator2DFull"
            , makeIterator2DFull_function_type( &::alignlib::makeIterator2DFull )
            , ( bp::arg("row"), bp::arg("col") ) );
    
    }

    { //::alignlib::makeLogOddor
    
        typedef ::alignlib::HLogOddor ( *makeLogOddor_function_type )( ::alignlib::Score const &,::alignlib::Score const & );
        
        bp::def( 
            "makeLogOddor"
            , makeLogOddor_function_type( &::alignlib::makeLogOddor )
            , ( bp::arg("scale_factor")=1.0e+0, bp::arg("mask_value")=-0x00000000a ) );
    
    }

    { //::alignlib::makeLogOddorBackground
    
        typedef ::alignlib::HLogOddor ( *makeLogOddorBackground_function_type )( ::alignlib::HFrequencyVector const &,::std::string const &,::alignlib::Score const &,::alignlib::Score const & );
        
        bp::def( 
            "makeLogOddorBackground"
            , makeLogOddorBackground_function_type( &::alignlib::makeLogOddorBackground )
            , ( bp::arg("frequencies"), bp::arg("alphabet"), bp::arg("scale_factor")=1.0e+0, bp::arg("mask_value")=-0x00000000a ) );
    
    }

    { //::alignlib::makeLogOddorDirichlet
    
        typedef ::alignlib::HLogOddor ( *makeLogOddorDirichlet_function_type )( ::alignlib::Score const &,::alignlib::Score const & );
        
        bp::def( 
            "makeLogOddorDirichlet"
            , makeLogOddorDirichlet_function_type( &::alignlib::makeLogOddorDirichlet )
            , ( bp::arg("scale_factor")=1.0e+0, bp::arg("mask_value")=-0x00000000a ) );
    
    }

    { //::alignlib::makeLogOddorGribskov
    
        typedef ::alignlib::HLogOddor ( *makeLogOddorGribskov_function_type )( ::alignlib::HSubstitutionMatrix const &,::alignlib::Score const &,::alignlib::Score const & );
        
        bp::def( 
            "makeLogOddorGribskov"
            , makeLogOddorGribskov_function_type( &::alignlib::makeLogOddorGribskov )
            , ( bp::arg("matrix"), bp::arg("scale_factor")=1.0e+0, bp::arg("mask_value")=-0x00000000a ) );
    
    }

    { //::alignlib::makeLogOddorUniform
    
        typedef ::alignlib::HLogOddor ( *makeLogOddorUniform_function_type )( ::alignlib::Score const &,::alignlib::Score const & );
        
        bp::def( 
            "makeLogOddorUniform"
            , makeLogOddorUniform_function_type( &::alignlib::makeLogOddorUniform )
            , ( bp::arg("scale_factor")=1.0e+0, bp::arg("mask_value")=-0x00000000a ) );
    
    }

    { //::alignlib::makeMultAlignment
    
        typedef ::alignlib::HMultAlignment ( *makeMultAlignment_function_type )(  );
        
        bp::def( 
            "makeMultAlignment"
            , makeMultAlignment_function_type( &::alignlib::makeMultAlignment ) );
    
    }

    { //::alignlib::makeMultipleAlignatorPileup
    
        typedef ::alignlib::HMultipleAlignator ( *makeMultipleAlignatorPileup_function_type )( ::alignlib::HAlignator const & );
        
        bp::def( 
            "makeMultipleAlignatorPileup"
            , makeMultipleAlignatorPileup_function_type( &::alignlib::makeMultipleAlignatorPileup )
            , ( bp::arg("alignator") ) );
    
    }

    { //::alignlib::makeMultipleAlignatorSimple
    
        typedef ::alignlib::HMultipleAlignator ( *makeMultipleAlignatorSimple_function_type )( ::alignlib::HAlignator const & );
        
        bp::def( 
            "makeMultipleAlignatorSimple"
            , makeMultipleAlignatorSimple_function_type( &::alignlib::makeMultipleAlignatorSimple )
            , ( bp::arg("alignator") ) );
    
    }

    { //::alignlib::makeMultipleAlignment
    
        typedef ::alignlib::HMultipleAlignment ( *makeMultipleAlignment_function_type )(  );
        
        bp::def( 
            "makeMultipleAlignment"
            , makeMultipleAlignment_function_type( &::alignlib::makeMultipleAlignment ) );
    
    }

    { //::alignlib::makeMultipleAlignmentDots
    
        typedef ::alignlib::HMultipleAlignment ( *makeMultipleAlignmentDots_function_type )( bool,int );
        
        bp::def( 
            "makeMultipleAlignmentDots"
            , makeMultipleAlignmentDots_function_type( &::alignlib::makeMultipleAlignmentDots )
            , ( bp::arg("compress_unaligend_columns")=(bool)(true), bp::arg("max_insertion_length")=(int)(-0x000000001) ) );
    
    }

    { //::alignlib::makeMutatedSequence
    
        typedef ::alignlib::HAlignandum ( *makeMutatedSequence_function_type )( ::alignlib::HAlignandum,::alignlib::HMutationMatrix const &,long int const );
        
        bp::def( 
            "makeMutatedSequence"
            , makeMutatedSequence_function_type( &::alignlib::makeMutatedSequence )
            , ( bp::arg("src"), bp::arg("matrix"), bp::arg("seed")=(long int const)(0) ) );
    
    }

    { //::alignlib::makeNormalDistributionParameters
    
        typedef ::alignlib::NormalDistributionParameters * ( *makeNormalDistributionParameters_function_type )(  );
        
        bp::def( 
            "makeNormalDistributionParameters"
            , makeNormalDistributionParameters_function_type( &::alignlib::makeNormalDistributionParameters )
            , bp::return_value_policy< bp::manage_new_object >() );
    
    }

    { //::alignlib::makePalette
    
        typedef ::alignlib::HPalette ( *makePalette_function_type )(  );
        
        bp::def( 
            "makePalette"
            , makePalette_function_type( &::alignlib::makePalette ) );
    
    }

    { //::alignlib::makePaletteMView
    
        typedef ::alignlib::HPalette ( *makePaletteMView_function_type )(  );
        
        bp::def( 
            "makePaletteMView"
            , makePaletteMView_function_type( &::alignlib::makePaletteMView ) );
    
    }

    { //::alignlib::makeProfile
    
        typedef ::alignlib::HAlignandum ( *makeProfile_function_type )( ::alignlib::HMultAlignment const &,::alignlib::HAlignandumVector const & );
        
        bp::def( 
            "makeProfile"
            , makeProfile_function_type( &::alignlib::makeProfile )
            , ( bp::arg("mali"), bp::arg("sequences") ) );
    
    }

    { //::alignlib::makeProfile
    
        typedef ::alignlib::HAlignandum ( *makeProfile_function_type )( ::alignlib::HAlignandum const &,::alignlib::HAlignment const &,::alignlib::HAlignandum const &,::alignlib::HAlignment const & );
        
        bp::def( 
            "makeProfile"
            , makeProfile_function_type( &::alignlib::makeProfile )
            , ( bp::arg("seqa"), bp::arg("map_seqa2profile"), bp::arg("seqb"), bp::arg("map_seqb2profile") ) );
    
    }

    { //::alignlib::makeProfile
    
        typedef ::alignlib::HAlignandum ( *makeProfile_function_type )( ::alignlib::HMultipleAlignment const & );
        
        bp::def( 
            "makeProfile"
            , makeProfile_function_type( &::alignlib::makeProfile )
            , ( bp::arg("mali") ) );
    
    }

    { //::alignlib::makeProfile
    
        typedef ::alignlib::HAlignandum ( *makeProfile_function_type )( ::alignlib::HMultipleAlignment const &,::alignlib::HEncoder const &,::alignlib::HWeightor const &,::alignlib::HRegularizor const &,::alignlib::HLogOddor const & );
        
        bp::def( 
            "makeProfile"
            , makeProfile_function_type( &::alignlib::makeProfile )
            , ( bp::arg("mali"), bp::arg("encoder"), bp::arg("weightor"), bp::arg("regularizor"), bp::arg("logoddor") ) );
    
    }

    { //::alignlib::makeProfile
    
        typedef ::alignlib::HAlignandum ( *makeProfile_function_type )( ::std::string const &,int );
        
        bp::def( 
            "makeProfile"
            , makeProfile_function_type( &::alignlib::makeProfile )
            , ( bp::arg("sequences"), bp::arg("nsequences") ) );
    
    }

    { //::alignlib::makeProfile
    
        typedef ::alignlib::HAlignandum ( *makeProfile_function_type )( ::std::string const &,int,::alignlib::HEncoder const &,::alignlib::HWeightor const &,::alignlib::HRegularizor const &,::alignlib::HLogOddor const & );
        
        bp::def( 
            "makeProfile"
            , makeProfile_function_type( &::alignlib::makeProfile )
            , ( bp::arg("sequences"), bp::arg("nsequences"), bp::arg("encoder"), bp::arg("weightor"), bp::arg("regularizor"), bp::arg("logoddor") ) );
    
    }

    { //::alignlib::makeProfile
    
        typedef ::alignlib::HAlignandum ( *makeProfile_function_type )( ::alignlib::Position const & );
        
        bp::def( 
            "makeProfile"
            , makeProfile_function_type( &::alignlib::makeProfile )
            , ( bp::arg("length") ) );
    
    }

    { //::alignlib::makeProfile
    
        typedef ::alignlib::HAlignandum ( *makeProfile_function_type )( ::alignlib::Position const &,::alignlib::HEncoder const &,::alignlib::HWeightor const &,::alignlib::HRegularizor const &,::alignlib::HLogOddor const & );
        
        bp::def( 
            "makeProfile"
            , makeProfile_function_type( &::alignlib::makeProfile )
            , ( bp::arg("length"), bp::arg("encoder"), bp::arg("weightor"), bp::arg("regularizor"), bp::arg("logoddor") ) );
    
    }

    { //::alignlib::makeProfile
    
        typedef ::alignlib::HAlignandum ( *makeProfile_function_type )(  );
        
        bp::def( 
            "makeProfile"
            , makeProfile_function_type( &::alignlib::makeProfile ) );
    
    }

    { //::alignlib::makeProfile
    
        typedef ::alignlib::HAlignandum ( *makeProfile_function_type )( ::alignlib::HEncoder const &,::alignlib::HWeightor const &,::alignlib::HRegularizor const &,::alignlib::HLogOddor const & );
        
        bp::def( 
            "makeProfile"
            , makeProfile_function_type( &::alignlib::makeProfile )
            , ( bp::arg("encoder"), bp::arg("weightor"), bp::arg("regularizor"), bp::arg("logoddor") ) );
    
    }

    { //::alignlib::makeRegularizor
    
        typedef ::alignlib::HRegularizor ( *makeRegularizor_function_type )(  );
        
        bp::def( 
            "makeRegularizor"
            , makeRegularizor_function_type( &::alignlib::makeRegularizor ) );
    
    }

    { //::alignlib::makeRegularizorDirichlet
    
        typedef ::alignlib::HRegularizor ( *makeRegularizorDirichlet_function_type )( ::alignlib::WeightedCount );
        
        bp::def( 
            "makeRegularizorDirichlet"
            , makeRegularizorDirichlet_function_type( &::alignlib::makeRegularizorDirichlet )
            , ( bp::arg("fade_cutoff")=0 ) );
    
    }

    { //::alignlib::makeRegularizorDirichletHash
    
        typedef ::alignlib::HRegularizor ( *makeRegularizorDirichletHash_function_type )( ::alignlib::WeightedCount );
        
        bp::def( 
            "makeRegularizorDirichletHash"
            , makeRegularizorDirichletHash_function_type( &::alignlib::makeRegularizorDirichletHash )
            , ( bp::arg("fade_cutoff")=0 ) );
    
    }

    { //::alignlib::makeRegularizorDirichletInterpolate
    
        typedef ::alignlib::HRegularizor ( *makeRegularizorDirichletInterpolate_function_type )( ::alignlib::WeightedCount );
        
        bp::def( 
            "makeRegularizorDirichletInterpolate"
            , makeRegularizorDirichletInterpolate_function_type( &::alignlib::makeRegularizorDirichletInterpolate )
            , ( bp::arg("fade_cutoff")=0 ) );
    
    }

    { //::alignlib::makeRegularizorDirichletPrecomputed
    
        typedef ::alignlib::HRegularizor ( *makeRegularizorDirichletPrecomputed_function_type )( ::alignlib::WeightedCount );
        
        bp::def( 
            "makeRegularizorDirichletPrecomputed"
            , makeRegularizorDirichletPrecomputed_function_type( &::alignlib::makeRegularizorDirichletPrecomputed )
            , ( bp::arg("fade_cutoff")=0 ) );
    
    }

    { //::alignlib::makeRegularizorPsiblast
    
        typedef ::alignlib::HRegularizor ( *makeRegularizorPsiblast_function_type )(  );
        
        bp::def( 
            "makeRegularizorPsiblast"
            , makeRegularizorPsiblast_function_type( &::alignlib::makeRegularizorPsiblast ) );
    
    }

    { //::alignlib::makeRegularizorTatusov
    
        typedef ::alignlib::HRegularizor ( *makeRegularizorTatusov_function_type )( ::alignlib::HSubstitutionMatrix const &,::alignlib::HFrequencyVector const &,double const &,double const & );
        
        bp::def( 
            "makeRegularizorTatusov"
            , makeRegularizorTatusov_function_type( &::alignlib::makeRegularizorTatusov )
            , ( bp::arg("matrix"), bp::arg("background"), bp::arg("beta"), bp::arg("lambda") ) );
    
    }

    { //::alignlib::makeScorer
    
        typedef ::alignlib::HScorer ( *makeScorer_function_type )(  );
        
        bp::def( 
            "makeScorer"
            , makeScorer_function_type( &::alignlib::makeScorer ) );
    
    }

    { //::alignlib::makeScorer
    
        typedef ::alignlib::HScorer ( *makeScorer_function_type )( ::alignlib::HAlignandum const &,::alignlib::HAlignandum const &,::alignlib::HSubstitutionMatrix const & );
        
        bp::def( 
            "makeScorer"
            , makeScorer_function_type( &::alignlib::makeScorer )
            , ( bp::arg("row"), bp::arg("col"), bp::arg("matrix") ) );
    
    }

    { //::alignlib::makeScorer
    
        typedef ::alignlib::HScorer ( *makeScorer_function_type )( ::alignlib::HAlignandum const &,::alignlib::HAlignandum const & );
        
        bp::def( 
            "makeScorer"
            , makeScorer_function_type( &::alignlib::makeScorer )
            , ( bp::arg("row"), bp::arg("col") ) );
    
    }

    { //::alignlib::makeSequence
    
        typedef ::alignlib::HAlignandum ( *makeSequence_function_type )( ::std::string const &,::alignlib::HEncoder const & );
        
        bp::def( 
            "makeSequence"
            , makeSequence_function_type( &::alignlib::makeSequence )
            , ( bp::arg("sequence"), bp::arg("encoder") ) );
    
    }

    { //::alignlib::makeSequence
    
        typedef ::alignlib::HAlignandum ( *makeSequence_function_type )( ::std::string const & );
        
        bp::def( 
            "makeSequence"
            , makeSequence_function_type( &::alignlib::makeSequence )
            , ( bp::arg("sequence") ) );
    
    }

    { //::alignlib::makeSequence
    
        typedef ::alignlib::HAlignandum ( *makeSequence_function_type )( char const *,::alignlib::HEncoder const & );
        
        bp::def( 
            "makeSequence"
            , makeSequence_function_type( &::alignlib::makeSequence )
            , ( bp::arg("sequence"), bp::arg("encoder") ) );
    
    }

    { //::alignlib::makeSequence
    
        typedef ::alignlib::HAlignandum ( *makeSequence_function_type )( char const * );
        
        bp::def( 
            "makeSequence"
            , makeSequence_function_type( &::alignlib::makeSequence )
            , ( bp::arg("sequence") ) );
    
    }

    { //::alignlib::makeSequenceFromFasta
    
        typedef ::alignlib::HAlignandum ( *makeSequenceFromFasta_function_type )( ::std::istream &,::std::string &,::alignlib::HEncoder const & );
        
        bp::def( 
            "makeSequenceFromFasta"
            , makeSequenceFromFasta_function_type( &::alignlib::makeSequenceFromFasta )
            , ( bp::arg("input"), bp::arg("description"), bp::arg("encoder") ) );
    
    }

    { //::alignlib::makeSubstitutionMatrix
    
        typedef ::alignlib::HSubstitutionMatrix ( *makeSubstitutionMatrix_function_type )( ::alignlib::ScoreVector const &,int,int );
        
        bp::def( 
            "makeSubstitutionMatrix"
            , makeSubstitutionMatrix_function_type( &::alignlib::makeSubstitutionMatrix )
            , ( bp::arg("scores"), bp::arg("nrows"), bp::arg("ncols") ) );
    
    }

    { //::alignlib::makeSubstitutionMatrix
    
        typedef ::alignlib::HSubstitutionMatrix ( *makeSubstitutionMatrix_function_type )( int,::alignlib::Score const,::alignlib::Score const );
        
        bp::def( 
            "makeSubstitutionMatrix"
            , makeSubstitutionMatrix_function_type( &::alignlib::makeSubstitutionMatrix )
            , ( bp::arg("alphabet_size"), bp::arg("match")=1, bp::arg("mismatch")=-0x000000001 ) );
    
    }

    { //::alignlib::makeSubstitutionMatrixBackTranslation
    
        typedef ::alignlib::HSubstitutionMatrix ( *makeSubstitutionMatrixBackTranslation_function_type )( ::alignlib::Score const &,::alignlib::Score const &,::alignlib::Score const &,::alignlib::HEncoder const & );
        
        bp::def( 
            "makeSubstitutionMatrixBackTranslation"
            , makeSubstitutionMatrixBackTranslation_function_type( &::alignlib::makeSubstitutionMatrixBackTranslation )
            , ( bp::arg("match"), bp::arg("mismatch"), bp::arg("approximate_match"), bp::arg("encoder") ) );
    
    }

    { //::alignlib::makeSubstitutionMatrixBlosum50
    
        typedef ::alignlib::HSubstitutionMatrix ( *makeSubstitutionMatrixBlosum50_function_type )( ::alignlib::HEncoder const & );
        
        bp::def( 
            "makeSubstitutionMatrixBlosum50"
            , makeSubstitutionMatrixBlosum50_function_type( &::alignlib::makeSubstitutionMatrixBlosum50 )
            , ( bp::arg("encoder") ) );
    
    }

    { //::alignlib::makeSubstitutionMatrixBlosum50
    
        typedef ::alignlib::HSubstitutionMatrix ( *makeSubstitutionMatrixBlosum50_function_type )(  );
        
        bp::def( 
            "makeSubstitutionMatrixBlosum50"
            , makeSubstitutionMatrixBlosum50_function_type( &::alignlib::makeSubstitutionMatrixBlosum50 ) );
    
    }

    { //::alignlib::makeSubstitutionMatrixBlosum62
    
        typedef ::alignlib::HSubstitutionMatrix ( *makeSubstitutionMatrixBlosum62_function_type )( ::alignlib::HEncoder const & );
        
        bp::def( 
            "makeSubstitutionMatrixBlosum62"
            , makeSubstitutionMatrixBlosum62_function_type( &::alignlib::makeSubstitutionMatrixBlosum62 )
            , ( bp::arg("encoder") ) );
    
    }

    { //::alignlib::makeSubstitutionMatrixBlosum62
    
        typedef ::alignlib::HSubstitutionMatrix ( *makeSubstitutionMatrixBlosum62_function_type )(  );
        
        bp::def( 
            "makeSubstitutionMatrixBlosum62"
            , makeSubstitutionMatrixBlosum62_function_type( &::alignlib::makeSubstitutionMatrixBlosum62 ) );
    
    }

    { //::alignlib::makeSubstitutionMatrixPam120
    
        typedef ::alignlib::HSubstitutionMatrix ( *makeSubstitutionMatrixPam120_function_type )( ::alignlib::HEncoder const & );
        
        bp::def( 
            "makeSubstitutionMatrixPam120"
            , makeSubstitutionMatrixPam120_function_type( &::alignlib::makeSubstitutionMatrixPam120 )
            , ( bp::arg("encoder") ) );
    
    }

    { //::alignlib::makeSubstitutionMatrixPam120
    
        typedef ::alignlib::HSubstitutionMatrix ( *makeSubstitutionMatrixPam120_function_type )(  );
        
        bp::def( 
            "makeSubstitutionMatrixPam120"
            , makeSubstitutionMatrixPam120_function_type( &::alignlib::makeSubstitutionMatrixPam120 ) );
    
    }

    { //::alignlib::makeSubstitutionMatrixPam250
    
        typedef ::alignlib::HSubstitutionMatrix ( *makeSubstitutionMatrixPam250_function_type )( ::alignlib::HEncoder const & );
        
        bp::def( 
            "makeSubstitutionMatrixPam250"
            , makeSubstitutionMatrixPam250_function_type( &::alignlib::makeSubstitutionMatrixPam250 )
            , ( bp::arg("encoder") ) );
    
    }

    { //::alignlib::makeSubstitutionMatrixPam250
    
        typedef ::alignlib::HSubstitutionMatrix ( *makeSubstitutionMatrixPam250_function_type )(  );
        
        bp::def( 
            "makeSubstitutionMatrixPam250"
            , makeSubstitutionMatrixPam250_function_type( &::alignlib::makeSubstitutionMatrixPam250 ) );
    
    }

    { //::alignlib::makeSubstitutionMatrixPam30
    
        typedef ::alignlib::HSubstitutionMatrix ( *makeSubstitutionMatrixPam30_function_type )( ::alignlib::HEncoder const & );
        
        bp::def( 
            "makeSubstitutionMatrixPam30"
            , makeSubstitutionMatrixPam30_function_type( &::alignlib::makeSubstitutionMatrixPam30 )
            , ( bp::arg("encoder") ) );
    
    }

    { //::alignlib::makeSubstitutionMatrixPam30
    
        typedef ::alignlib::HSubstitutionMatrix ( *makeSubstitutionMatrixPam30_function_type )(  );
        
        bp::def( 
            "makeSubstitutionMatrixPam30"
            , makeSubstitutionMatrixPam30_function_type( &::alignlib::makeSubstitutionMatrixPam30 ) );
    
    }

    { //::alignlib::makeToolkit
    
        typedef ::alignlib::HToolkit ( *makeToolkit_function_type )( ::alignlib::ToolkitType const & );
        
        bp::def( 
            "makeToolkit"
            , makeToolkit_function_type( &::alignlib::makeToolkit )
            , ( bp::arg("type")=::alignlib::ProteinAlignment ) );
    
    }

    { //::alignlib::makeTree
    
        typedef ::alignlib::HTree ( *makeTree_function_type )( ::alignlib::Node const );
        
        bp::def( 
            "makeTree"
            , makeTree_function_type( &::alignlib::makeTree )
            , ( bp::arg("num_leaves")=(long unsigned int const)(0) ) );
    
    }

    { //::alignlib::makeTreetorDistanceLinkage
    
        typedef ::alignlib::HTreetor ( *makeTreetorDistanceLinkage_function_type )( ::alignlib::HDistor const &,::alignlib::LinkageType );
        
        bp::def( 
            "makeTreetorDistanceLinkage"
            , makeTreetorDistanceLinkage_function_type( &::alignlib::makeTreetorDistanceLinkage )
            , ( bp::arg("distor"), bp::arg("method")=::alignlib::UPGMA ) );
    
    }

    { //::alignlib::makeTreetorDistanceNJ
    
        typedef ::alignlib::HTreetor ( *makeTreetorDistanceNJ_function_type )( ::alignlib::HDistor const & );
        
        bp::def( 
            "makeTreetorDistanceNJ"
            , makeTreetorDistanceNJ_function_type( &::alignlib::makeTreetorDistanceNJ )
            , ( bp::arg("distor") ) );
    
    }

    { //::alignlib::makeWeightor
    
        typedef ::alignlib::HWeightor ( *makeWeightor_function_type )(  );
        
        bp::def( 
            "makeWeightor"
            , makeWeightor_function_type( &::alignlib::makeWeightor ) );
    
    }

    { //::alignlib::makeWeightorHenikoff
    
        typedef ::alignlib::HWeightor ( *makeWeightorHenikoff_function_type )( bool const );
        
        bp::def( 
            "makeWeightorHenikoff"
            , makeWeightorHenikoff_function_type( &::alignlib::makeWeightorHenikoff )
            , ( bp::arg("rescale_counts")=(bool const)(false) ) );
    
    }

    { //::alignlib::pruneAlignment
    
        typedef void ( *pruneAlignment_function_type )( ::alignlib::HAlignment &,::alignlib::Score const,::alignlib::Score const );
        
        bp::def( 
            "pruneAlignment"
            , pruneAlignment_function_type( &::alignlib::pruneAlignment )
            , ( bp::arg("src"), bp::arg("gop"), bp::arg("gep") ) );
    
    }

    { //::alignlib::removeFragments
    
        typedef void ( *removeFragments_function_type )( ::alignlib::HAlignment &,unsigned int const,unsigned int const,::alignlib::Position const );
        
        bp::def( 
            "removeFragments"
            , removeFragments_function_type( &::alignlib::removeFragments )
            , ( bp::arg("dest"), bp::arg("fragment_length"), bp::arg("min_gap_length"), bp::arg("row_length")=(int const)(-0x000000001) ) );
    
    }

    { //::alignlib::rescoreAlignment
    
        typedef void ( *rescoreAlignment_function_type )( ::alignlib::HAlignment &,::alignlib::Score const );
        
        bp::def( 
            "rescoreAlignment"
            , rescoreAlignment_function_type( &::alignlib::rescoreAlignment )
            , ( bp::arg("dest"), bp::arg("score")=0 ) );
    
    }

    { //::alignlib::rescoreAlignment
    
        typedef void ( *rescoreAlignment_function_type )( ::alignlib::HAlignment &,::alignlib::HAlignandum const &,::alignlib::HAlignandum const &,::alignlib::HScorer const & );
        
        bp::def( 
            "rescoreAlignment"
            , rescoreAlignment_function_type( &::alignlib::rescoreAlignment )
            , ( bp::arg("dest"), bp::arg("row"), bp::arg("col"), bp::arg("scorer") ) );
    
    }

    { //::alignlib::rescoreFragmentsNumberGaps
    
        typedef void ( *rescoreFragmentsNumberGaps_function_type )( ::alignlib::HFragmentVector &,::alignlib::Score,::alignlib::Score );
        
        bp::def( 
            "rescoreFragmentsNumberGaps"
            , rescoreFragmentsNumberGaps_function_type( &::alignlib::rescoreFragmentsNumberGaps )
            , ( bp::arg("fragments"), bp::arg("gop")=0, bp::arg("gep")=0 ) );
    
    }

    { //::alignlib::setDefaultDistor
    
        typedef void ( *setDefaultDistor_function_type )( ::alignlib::HDistor const & );
        
        bp::def( 
            "setDefaultDistor"
            , setDefaultDistor_function_type( &::alignlib::setDefaultDistor )
            , ( bp::arg("arg0") ) );
    
    }

    { //::alignlib::setDefaultEncoder
    
        typedef void ( *setDefaultEncoder_function_type )( ::alignlib::HEncoder const & );
        
        bp::def( 
            "setDefaultEncoder"
            , setDefaultEncoder_function_type( &::alignlib::setDefaultEncoder )
            , ( bp::arg("arg0") ) );
    
    }

    { //::alignlib::setDefaultIterator2D
    
        typedef void ( *setDefaultIterator2D_function_type )( ::alignlib::HIterator2D const & );
        
        bp::def( 
            "setDefaultIterator2D"
            , setDefaultIterator2D_function_type( &::alignlib::setDefaultIterator2D )
            , ( bp::arg("arg0") ) );
    
    }

    { //::alignlib::setDefaultLogOddor
    
        typedef void ( *setDefaultLogOddor_function_type )( ::alignlib::HLogOddor const & );
        
        bp::def( 
            "setDefaultLogOddor"
            , setDefaultLogOddor_function_type( &::alignlib::setDefaultLogOddor )
            , ( bp::arg("arg0") ) );
    
    }

    { //::alignlib::setDefaultPalette
    
        typedef void ( *setDefaultPalette_function_type )( ::alignlib::HPalette const & );
        
        bp::def( 
            "setDefaultPalette"
            , setDefaultPalette_function_type( &::alignlib::setDefaultPalette )
            , ( bp::arg("arg0") ) );
    
    }

    { //::alignlib::setDefaultRegularizor
    
        typedef void ( *setDefaultRegularizor_function_type )( ::alignlib::HRegularizor const & );
        
        bp::def( 
            "setDefaultRegularizor"
            , setDefaultRegularizor_function_type( &::alignlib::setDefaultRegularizor )
            , ( bp::arg("arg0") ) );
    
    }

    { //::alignlib::setDefaultScorer
    
        typedef void ( *setDefaultScorer_function_type )( ::alignlib::HScorer const & );
        
        bp::def( 
            "setDefaultScorer"
            , setDefaultScorer_function_type( &::alignlib::setDefaultScorer )
            , ( bp::arg("arg0") ) );
    
    }

    { //::alignlib::setDefaultSubstitutionMatrix
    
        typedef void ( *setDefaultSubstitutionMatrix_function_type )( ::alignlib::HSubstitutionMatrix const & );
        
        bp::def( 
            "setDefaultSubstitutionMatrix"
            , setDefaultSubstitutionMatrix_function_type( &::alignlib::setDefaultSubstitutionMatrix )
            , ( bp::arg("arg0") ) );
    
    }

    { //::alignlib::setDefaultToolkit
    
        typedef void ( *setDefaultToolkit_function_type )( ::alignlib::HToolkit const & );
        
        bp::def( 
            "setDefaultToolkit"
            , setDefaultToolkit_function_type( &::alignlib::setDefaultToolkit )
            , ( bp::arg("arg0") ) );
    
    }

    { //::alignlib::setDefaultTreetor
    
        typedef void ( *setDefaultTreetor_function_type )( ::alignlib::HTreetor const & );
        
        bp::def( 
            "setDefaultTreetor"
            , setDefaultTreetor_function_type( &::alignlib::setDefaultTreetor )
            , ( bp::arg("arg0") ) );
    
    }

    { //::alignlib::setDefaultWeightor
    
        typedef void ( *setDefaultWeightor_function_type )( ::alignlib::HWeightor const & );
        
        bp::def( 
            "setDefaultWeightor"
            , setDefaultWeightor_function_type( &::alignlib::setDefaultWeightor )
            , ( bp::arg("arg0") ) );
    
    }

    { //::alignlib::splitAlignment
    
        typedef ::alignlib::HFragmentVector ( *splitAlignment_function_type )( ::alignlib::HAlignment const &,::alignlib::HAlignment const &,::alignlib::CombinationMode const );
        
        bp::def( 
            "splitAlignment"
            , splitAlignment_function_type( &::alignlib::splitAlignment )
            , ( bp::arg("src1"), bp::arg("src2"), bp::arg("mode") ) );
    
    }

    { //::alignlib::splitAlignment
    
        typedef ::alignlib::HFragmentVector ( *splitAlignment_function_type )( ::alignlib::HAlignment const &,int const,bool,bool );
        
        bp::def( 
            "splitAlignment"
            , splitAlignment_function_type( &::alignlib::splitAlignment )
            , ( bp::arg("src"), bp::arg("max_gap_width"), bp::arg("split_row")=(bool)(true), bp::arg("split_col")=(bool)(true) ) );
    
    }

    { //::alignlib::toProfile
    
        typedef ::alignlib::HProfile const ( *toProfile_function_type )( ::alignlib::HAlignandum const & );
        
        bp::def( 
            "toProfile"
            , toProfile_function_type( &::alignlib::toProfile )
            , ( bp::arg("src") ) );
    
    }

    { //::alignlib::toProfile
    
        typedef ::alignlib::HProfile ( *toProfile_function_type )( ::alignlib::HAlignandum & );
        
        bp::def( 
            "toProfile"
            , toProfile_function_type( &::alignlib::toProfile )
            , ( bp::arg("src") ) );
    
    }

    { //::alignlib::toSequence
    
        typedef ::alignlib::HSequence const ( *toSequence_function_type )( ::alignlib::HAlignandum const & );
        
        bp::def( 
            "toSequence"
            , toSequence_function_type( &::alignlib::toSequence )
            , ( bp::arg("src") ) );
    
    }

    { //::alignlib::toSequence
    
        typedef ::alignlib::HSequence ( *toSequence_function_type )( ::alignlib::HAlignandum & );
        
        bp::def( 
            "toSequence"
            , toSequence_function_type( &::alignlib::toSequence )
            , ( bp::arg("src") ) );
    
    }

    { //::alignlib::writeFragments
    
        typedef void ( *writeFragments_function_type )( ::std::ostream &,::alignlib::HFragmentVector const & );
        
        bp::def( 
            "writeFragments"
            , writeFragments_function_type( &::alignlib::writeFragments )
            , ( bp::arg("output"), bp::arg("fragments") ) );
    
    }

    { //::alignlib::writeNewHampshire
    
        typedef void ( *writeNewHampshire_function_type )( ::std::ostream &,::alignlib::HTree const &,::alignlib::HStringVector const & );
        
        bp::def( 
            "writeNewHampshire"
            , writeNewHampshire_function_type( &::alignlib::writeNewHampshire )
            , ( bp::arg("output"), bp::arg("tree"), bp::arg("labels") ) );
    
    }

}
