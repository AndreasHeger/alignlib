// This file has been generated by Py++.

#include "boost/python.hpp"
#include "includes.h"
#include "iostream"
#include "cstdio"
#include "MultAlignment.pypp.hpp"

namespace bp = boost::python;

void register_MultAlignment_class(){

    { //::alignlib::MultAlignment
        typedef bp::class_< alignlib::MultAlignment, boost::noncopyable > MultAlignment_exposer_t;
        MultAlignment_exposer_t MultAlignment_exposer = MultAlignment_exposer_t( "MultAlignment", bp::no_init );
        bp::scope MultAlignment_scope( MultAlignment_exposer );
        { //::alignlib::MultAlignment::add
        
            typedef void ( ::alignlib::MultAlignment::*add_function_type )( ::alignlib::HAlignment const & ) ;
            
            MultAlignment_exposer.def( 
                "add"
                , add_function_type( &::alignlib::MultAlignment::add )
                , ( bp::arg("map_mali2sequence") ) );
        
        }
        { //::alignlib::MultAlignment::add
        
            typedef void ( ::alignlib::MultAlignment::*add_function_type )( ::alignlib::HMultAlignment const &,::alignlib::HAlignment const & ) ;
            
            MultAlignment_exposer.def( 
                "add"
                , add_function_type( &::alignlib::MultAlignment::add )
                , ( bp::arg("src"), bp::arg("map_mali2sequence") ) );
        
        }
        { //::alignlib::MultAlignment::add
        
            typedef void ( ::alignlib::MultAlignment::*add_function_type )( ::alignlib::HMultAlignment const &,::alignlib::HAlignment const &,::alignlib::HAlignment const & ) ;
            
            MultAlignment_exposer.def( 
                "add"
                , add_function_type( &::alignlib::MultAlignment::add )
                , ( bp::arg("other"), bp::arg("map_this2new"), bp::arg("map_other2new") ) );
        
        }
        { //::alignlib::MultAlignment::clear
        
            typedef void ( ::alignlib::MultAlignment::*clear_function_type )(  ) ;
            
            MultAlignment_exposer.def( 
                "clear"
                , clear_function_type( &::alignlib::MultAlignment::clear ) );
        
        }
        { //::alignlib::MultAlignment::eraseRow
        
            typedef void ( ::alignlib::MultAlignment::*eraseRow_function_type )( int ) ;
            
            MultAlignment_exposer.def( 
                "eraseRow"
                , eraseRow_function_type( &::alignlib::MultAlignment::eraseRow )
                , ( bp::arg("row") ) );
        
        }
        { //::alignlib::MultAlignment::expand
        
            typedef void ( ::alignlib::MultAlignment::*expand_function_type )( ::alignlib::HAlignandumVector const & ) ;
            
            MultAlignment_exposer.def( 
                "expand"
                , expand_function_type( &::alignlib::MultAlignment::expand )
                , ( bp::arg("sequences") ) );
        
        }
        { //::alignlib::MultAlignment::getClone
        
            typedef ::alignlib::HMultAlignment ( ::alignlib::MultAlignment::*getClone_function_type )(  ) const;
            
            MultAlignment_exposer.def( 
                "getClone"
                , getClone_function_type( &::alignlib::MultAlignment::getClone ) );
        
        }
        { //::alignlib::MultAlignment::getColumnCounts
        
            typedef ::alignlib::HCountVector ( ::alignlib::MultAlignment::*getColumnCounts_function_type )(  ) const;
            
            MultAlignment_exposer.def( 
                "getColumnCounts"
                , getColumnCounts_function_type( &::alignlib::MultAlignment::getColumnCounts ) );
        
        }
        { //::alignlib::MultAlignment::getLength
        
            typedef ::alignlib::Position ( ::alignlib::MultAlignment::*getLength_function_type )(  ) const;
            
            MultAlignment_exposer.def( 
                "getLength"
                , getLength_function_type( &::alignlib::MultAlignment::getLength ) );
        
        }
        { //::alignlib::MultAlignment::getNew
        
            typedef ::alignlib::HMultAlignment ( ::alignlib::MultAlignment::*getNew_function_type )(  ) const;
            
            MultAlignment_exposer.def( 
                "getNew"
                , getNew_function_type( &::alignlib::MultAlignment::getNew ) );
        
        }
        { //::alignlib::MultAlignment::getNumSequences
        
            typedef int ( ::alignlib::MultAlignment::*getNumSequences_function_type )(  ) const;
            
            MultAlignment_exposer.def( 
                "getNumSequences"
                , getNumSequences_function_type( &::alignlib::MultAlignment::getNumSequences ) );
        
        }
        { //::alignlib::MultAlignment::getPositionMatrix
        
            typedef ::alignlib::HPositionMatrix ( ::alignlib::MultAlignment::*getPositionMatrix_function_type )( bool const & ) const;
            
            MultAlignment_exposer.def( 
                "getPositionMatrix"
                , getPositionMatrix_function_type( &::alignlib::MultAlignment::getPositionMatrix )
                , ( bp::arg("transpose")=false ) );
        
        }
        { //::alignlib::MultAlignment::getRow
        
            typedef ::alignlib::HAlignment const ( ::alignlib::MultAlignment::*getRow_function_type )( int ) const;
            
            MultAlignment_exposer.def( 
                "getRow"
                , getRow_function_type( &::alignlib::MultAlignment::getRow )
                , ( bp::arg("row") ) );
        
        }
        { //::alignlib::MultAlignment::getRowCounts
        
            typedef ::alignlib::HCountVector ( ::alignlib::MultAlignment::*getRowCounts_function_type )(  ) const;
            
            MultAlignment_exposer.def( 
                "getRowCounts"
                , getRowCounts_function_type( &::alignlib::MultAlignment::getRowCounts ) );
        
        }
        { //::alignlib::MultAlignment::isAligned
        
            typedef bool ( ::alignlib::MultAlignment::*isAligned_function_type )( ::alignlib::Position const & ) ;
            
            MultAlignment_exposer.def( 
                "isAligned"
                , isAligned_function_type( &::alignlib::MultAlignment::isAligned )
                , ( bp::arg("col") ) );
        
        }
        { //::alignlib::MultAlignment::isEmpty
        
            typedef bool ( ::alignlib::MultAlignment::*isEmpty_function_type )(  ) const;
            
            MultAlignment_exposer.def( 
                "isEmpty"
                , isEmpty_function_type( &::alignlib::MultAlignment::isEmpty ) );
        
        }
        { //::alignlib::MultAlignment::map
        
            typedef void ( ::alignlib::MultAlignment::*map_function_type )( ::alignlib::HAlignment const &,::alignlib::CombinationMode const & ) ;
            
            MultAlignment_exposer.def( 
                "map"
                , map_function_type( &::alignlib::MultAlignment::map )
                , ( bp::arg("other"), bp::arg("mode") ) );
        
        }
        { //::alignlib::MultAlignment::shrink
        
            typedef void ( ::alignlib::MultAlignment::*shrink_function_type )(  ) ;
            
            MultAlignment_exposer.def( 
                "shrink"
                , shrink_function_type( &::alignlib::MultAlignment::shrink ) );
        
        }
        { //::alignlib::MultAlignment::write
        
            typedef void ( ::alignlib::MultAlignment::*write_function_type )( ::std::ostream & ) const;
            
            MultAlignment_exposer.def( 
                "write"
                , write_function_type( &::alignlib::MultAlignment::write )
                , ( bp::arg("output") ) );
        
        }
        MultAlignment_exposer.def( bp::self_ns::str( bp::self ) );
        bp::register_ptr_to_python< boost::shared_ptr< alignlib::MultAlignment > >();
    }

}
