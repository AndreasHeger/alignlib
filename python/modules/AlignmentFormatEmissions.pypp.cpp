// This file has been generated by Py++.

#include "boost/python.hpp"
#include "includes.h"
#include "iostream"
#include "cstdio"
#include "AlignmentFormatEmissions.pypp.hpp"

namespace bp = boost::python;

struct AlignmentFormatEmissions_wrapper : alignlib::AlignmentFormatEmissions, bp::wrapper< alignlib::AlignmentFormatEmissions > {

    AlignmentFormatEmissions_wrapper( )
    : alignlib::AlignmentFormatEmissions( )
      , bp::wrapper< alignlib::AlignmentFormatEmissions >(){
        // null constructor
    
    }

    AlignmentFormatEmissions_wrapper(::alignlib::HAlignment const & src )
    : alignlib::AlignmentFormatEmissions( src )
      , bp::wrapper< alignlib::AlignmentFormatEmissions >(){
        // constructor
    
    }

    AlignmentFormatEmissions_wrapper(::std::istream & src )
    : alignlib::AlignmentFormatEmissions( boost::ref(src) )
      , bp::wrapper< alignlib::AlignmentFormatEmissions >(){
        // constructor
    
    }

    AlignmentFormatEmissions_wrapper(::std::string const & src )
    : alignlib::AlignmentFormatEmissions( src )
      , bp::wrapper< alignlib::AlignmentFormatEmissions >(){
        // constructor
    
    }

    AlignmentFormatEmissions_wrapper(::alignlib::AlignmentFormatEmissions const & arg0 )
    : alignlib::AlignmentFormatEmissions( boost::ref(arg0) )
      , bp::wrapper< alignlib::AlignmentFormatEmissions >(){
        // copy constructor
    
    }

    AlignmentFormatEmissions_wrapper(::alignlib::Position const row_from, ::std::string const & row, ::alignlib::Position const col_from, ::std::string const & col )
    : alignlib::AlignmentFormatEmissions( row_from, row, col_from, col )
      , bp::wrapper< alignlib::AlignmentFormatEmissions >(){
        // constructor
    
    }

    virtual void copy( ::alignlib::HAlignment & dest ) const  {
        if( bp::override func_copy = this->get_override( "copy" ) )
            func_copy( dest );
        else
            this->alignlib::AlignmentFormatEmissions::copy( dest );
    }
    
    
    void default_copy( ::alignlib::HAlignment & dest ) const  {
        alignlib::AlignmentFormatEmissions::copy( dest );
    }

    virtual void fill( ::alignlib::HAlignment const & src ) {
        if( bp::override func_fill = this->get_override( "fill" ) )
            func_fill( src );
        else
            this->alignlib::AlignmentFormatEmissions::fill( src );
    }
    
    
    void default_fill( ::alignlib::HAlignment const & src ) {
        alignlib::AlignmentFormatEmissions::fill( src );
    }

    virtual ::alignlib::Position getNumEmissions( ::std::string const & src ) {
        if( bp::override func_getNumEmissions = this->get_override( "getNumEmissions" ) )
            return func_getNumEmissions( src );
        else
            return this->alignlib::AlignmentFormatEmissions::getNumEmissions( src );
    }
    
    
    ::alignlib::Position default_getNumEmissions( ::std::string const & src ) {
        return alignlib::AlignmentFormatEmissions::getNumEmissions( src );
    }

    virtual void load( ::std::istream & arg0 ) {
        if( bp::override func_load = this->get_override( "load" ) )
            func_load( boost::ref(arg0) );
        else
            this->alignlib::AlignmentFormatEmissions::load( boost::ref(arg0) );
    }
    
    
    void default_load( ::std::istream & arg0 ) {
        alignlib::AlignmentFormatEmissions::load( boost::ref(arg0) );
    }

    virtual void save( ::std::ostream & arg0 ) const  {
        if( bp::override func_save = this->get_override( "save" ) )
            func_save( boost::ref(arg0) );
        else
            this->alignlib::AlignmentFormatEmissions::save( boost::ref(arg0) );
    }
    
    
    void default_save( ::std::ostream & arg0 ) const  {
        alignlib::AlignmentFormatEmissions::save( boost::ref(arg0) );
    }

};

void register_AlignmentFormatEmissions_class(){

    { //::alignlib::AlignmentFormatEmissions
        typedef bp::class_< AlignmentFormatEmissions_wrapper, bp::bases< alignlib::AlignmentFormat > > AlignmentFormatEmissions_exposer_t;
        AlignmentFormatEmissions_exposer_t AlignmentFormatEmissions_exposer = AlignmentFormatEmissions_exposer_t( "AlignmentFormatEmissions", bp::init< >() );
        bp::scope AlignmentFormatEmissions_scope( AlignmentFormatEmissions_exposer );
        AlignmentFormatEmissions_exposer.def( bp::init< alignlib::HAlignment const & >(( bp::arg("src") )) );
        bp::implicitly_convertible< alignlib::HAlignment const &, alignlib::AlignmentFormatEmissions >();
        AlignmentFormatEmissions_exposer.def( bp::init< std::istream & >(( bp::arg("src") )) );
        bp::implicitly_convertible< std::istream &, alignlib::AlignmentFormatEmissions >();
        AlignmentFormatEmissions_exposer.def( bp::init< std::string const & >(( bp::arg("src") )) );
        bp::implicitly_convertible< std::string const &, alignlib::AlignmentFormatEmissions >();
        AlignmentFormatEmissions_exposer.def( bp::init< alignlib::AlignmentFormatEmissions const & >(( bp::arg("arg0") )) );
        AlignmentFormatEmissions_exposer.def( bp::init< int, std::string const &, int, std::string const & >(( bp::arg("row_from"), bp::arg("row"), bp::arg("col_from"), bp::arg("col") )) );
        { //::alignlib::AlignmentFormatEmissions::copy
        
            typedef void ( ::alignlib::AlignmentFormatEmissions::*copy_function_type )( ::alignlib::HAlignment & ) const;
            typedef void ( AlignmentFormatEmissions_wrapper::*default_copy_function_type )( ::alignlib::HAlignment & ) const;
            
            AlignmentFormatEmissions_exposer.def( 
                "copy"
                , copy_function_type(&::alignlib::AlignmentFormatEmissions::copy)
                , default_copy_function_type(&AlignmentFormatEmissions_wrapper::default_copy)
                , ( bp::arg("dest") ) );
        
        }
        { //::alignlib::AlignmentFormatEmissions::fill
        
            typedef void ( ::alignlib::AlignmentFormatEmissions::*fill_function_type )( ::alignlib::HAlignment const & ) ;
            typedef void ( AlignmentFormatEmissions_wrapper::*default_fill_function_type )( ::alignlib::HAlignment const & ) ;
            
            AlignmentFormatEmissions_exposer.def( 
                "fill"
                , fill_function_type(&::alignlib::AlignmentFormatEmissions::fill)
                , default_fill_function_type(&AlignmentFormatEmissions_wrapper::default_fill)
                , ( bp::arg("src") ) );
        
        }
        { //::alignlib::AlignmentFormatEmissions::getNumEmissions
        
            typedef ::alignlib::Position ( ::alignlib::AlignmentFormatEmissions::*getNumEmissions_function_type )( ::std::string const & ) ;
            typedef ::alignlib::Position ( AlignmentFormatEmissions_wrapper::*default_getNumEmissions_function_type )( ::std::string const & ) ;
            
            AlignmentFormatEmissions_exposer.def( 
                "getNumEmissions"
                , getNumEmissions_function_type(&::alignlib::AlignmentFormatEmissions::getNumEmissions)
                , default_getNumEmissions_function_type(&AlignmentFormatEmissions_wrapper::default_getNumEmissions)
                , ( bp::arg("src") ) );
        
        }
        { //::alignlib::AlignmentFormatEmissions::load
        
            typedef void ( ::alignlib::AlignmentFormatEmissions::*load_function_type )( ::std::istream & ) ;
            typedef void ( AlignmentFormatEmissions_wrapper::*default_load_function_type )( ::std::istream & ) ;
            
            AlignmentFormatEmissions_exposer.def( 
                "load"
                , load_function_type(&::alignlib::AlignmentFormatEmissions::load)
                , default_load_function_type(&AlignmentFormatEmissions_wrapper::default_load)
                , ( bp::arg("arg0") ) );
        
        }
        { //::alignlib::AlignmentFormatEmissions::save
        
            typedef void ( ::alignlib::AlignmentFormatEmissions::*save_function_type )( ::std::ostream & ) const;
            typedef void ( AlignmentFormatEmissions_wrapper::*default_save_function_type )( ::std::ostream & ) const;
            
            AlignmentFormatEmissions_exposer.def( 
                "save"
                , save_function_type(&::alignlib::AlignmentFormatEmissions::save)
                , default_save_function_type(&AlignmentFormatEmissions_wrapper::default_save)
                , ( bp::arg("arg0") ) );
        
        }
        AlignmentFormatEmissions_exposer.def_readwrite( "mColAlignment", &alignlib::AlignmentFormatEmissions::mColAlignment );
        AlignmentFormatEmissions_exposer.def_readwrite( "mRowAlignment", &alignlib::AlignmentFormatEmissions::mRowAlignment );
    }

}
